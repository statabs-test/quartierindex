{"version":3,"sources":["assets/welcome.jpg","state/indicator/types.ts","state/indicator/selectors.ts","state/indicator/constants.ts","state/indicator/actions.ts","component/selection/IndicatorSelectionGroup.tsx","component/customElements/NavButton.tsx","component/navigation/SelectionNavigation.tsx","component/layout/WizardLayout.tsx","state/util/constants.ts","state/util/actions.ts","state/util/selectors.ts","component/disclaimer/Disclaimer.tsx","page/welcome.tsx","page/IndicatorSelection.tsx","helpers/index.ts","component/selection/IndicatorRatingLine.tsx","component/navigation/RatingNavigation.tsx","page/IndicatorRating.tsx","component/customElements/Tooltip.tsx","component/selection/IndicatorImportanceLine.tsx","component/navigation/WeightNavigation.tsx","page/IndicatorWeight.tsx","state/district/selectors.ts","state/observation/selectors.ts","component/barplot/DistrictLabel.tsx","component/barplot/AnimatePosition.tsx","component/barplot/DistricRankingTooltip.tsx","component/barplot/util.ts","component/barplot/DistrictRanking.tsx","component/navigation/MainNavigation.tsx","component/parallelLinePlot/legend/LegendItem.tsx","component/parallelLinePlot/legend/Legend.tsx","state/district/constants.ts","component/barplot/IndicatorTooltip.tsx","component/barplot/IndicatorPlot.tsx","component/barplot/EmptyIndicatorPlot.tsx","component/parallelLinePlot/ChartContainer.tsx","state/district/actions.ts","component/parallelLinePlot/IndicatorRanking.tsx","page/MainView.tsx","App.tsx","state/indicator/reducer.ts","state/district/reducer.ts","state/observation/constants.ts","state/observation/reducer.ts","state/util/reducer.ts","state/index.ts","theme/theme.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","NegativePositive","WeightNumber","select","state","indicator","allIndicators","_","byId","getIndicator","props","id","getGroupedIndicators","subject","getSelectedIndicators","selectedIndicatorIndexes","orderedBySelection","selectedId","getChoosableIndicators","filter","selected","INDICATOR_UPDATE","INDICATOR_SELECT","INDICATOR_VALUATION","INDICATOR_WEIGHT","INDICATOR_GROUP_SELECTION","REPLACE_SELECTED_INDICATOR","selectIndicator","type","constants","payload","deselectIndicator","setPositiveValuation","valuation","Positive","setNegativeValuation","Negative","setWeight","weight","mapDispatchToProps","deselect","toggleGroup","compose","connect","value","groupName","groupSelectedCount","length","react","className","map","key","name","checked","onChange","e","target","label","getToggleLabel","styleEnabledButton","backgroundColor","border","borderRadius","boxShadow","color","textTransform","styleDisabledButton","NavButton","_ref","to","children","rest","Object","objectWithoutProperties","index_es","assign","component","b","Link","c","style","disabled","SelectionNavigation","valid","container","justify","item","xs","customElements_NavButton","variant","isValid","ignoreRedirect","Redirect","TOGGLE_SELECT_INDICATOR_VISIBILITY","DISABLE_DISCLAIMER","toggleIndicatorSelectionVisibility","currentVisibility","visible","getShowDisclaimer","util","showDisclaimer","disableDisclaimer","onClick","Icon_default","a","welcome","text","src","welcomeImage","withStyles","theme","createStyles","root","flexGrow","paddingTop","paddingBottom","marginTop","spacing","unit","paddingLeft","title","padding","groupedIndicators","numIndicators","sum","indicatorGroup","layout_WizardLayout","selection_IndicatorSelectionGroup","navigation_SelectionNavigation","disclaimer_Disclaimer","getColor","positive","borderColor","getClassNameSelectedUnselected","buttonType","getClassNameNegPosBorder","labels","convertDecimalPoint","num","toString","replace","positiveValuation","negativeValuation","selectedIndicators","valuationText","paddingRight","RatingNavigation","toggleVisibility","selection_IndicatorRatingLine","description","navigation_RatingNavigation","tooltipStyle","fontWeight","tooltipTitleStyle","Tooltip","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayTooltip","hideTooltip","bind","assertThisInitialized","showTooltip","setState","_this$props","onMouseLeave","onMouseOver","React","setIndicatorWeight","&$checked","textAlign","leftIcon","marginRight","marginBottom","textCentered","display","sizeIcon","fontSize","ownProps","objectSpread","classes","indexPrefix","weightText","indexOf","split","prefix","substring","suffixIndex","suffix","Grid_default","alignItems","customElements_Tooltip","ONE","TWO","THREE","FOUR","idx","FormLabel_default","htmlFor","WeightNavigation","selection_IndicatorImportanceLine","navigation_WeightNavigation","district","allDistricts","allDistrictsById","getDistrictBy","districtId","success","pop","ReferenceError","getAllObservations","observation","groupObservationsByDistrict","createSelector","observations","getWeightedAverageValue","cnt","total","result","indicatorId","normValue","getAverageValue","getGlobalRanking","groupedByDistrict","selectedIndicator","getSortedGlobalRanking","globalRanking","reverse","makeGetIndicatorRanking","sortedRanking","rankings","Math","abs","ranking","getLineRanking","rank","green","h","s","v","red","objectId","labelText","rankValue","highlighted","viewOptions","highlight","hover","toLineRank","DistrictLabel","x","y","width","height","xNew","substr","yNew","react_default","createElement","fill","textAnchor","trim","AnimatePosition","web","config","gentle","precision","velocity","DistrictRankingTooltip","borderStyle","borderWidth","rankName","includes","slice","join","active","getStyle","viewBox","position","zIndex","rx","ry","stroke","strokeWidth","transform","getDistrictName","getBaseTicks","minMax","min","max","getDecimals","n","nAsString","charAt","decimal","decimals","minDecimal","maxDecimal","getSmallerDecimal","minTick","maxTick","diff","offset","pow","valueOf","toFixed","Number","withMiddleTick","roundingErrorCorrection","getMinMax","data","values","d","apply","toConsumableArray","DistrictRanking","positions","_this2","districts","ranks","indicators","rankNum","i","concat","round","reduce","accu","entry","defineProperty","getRankPosition","positionsBefore","ticks","getTicks","domain","asDomain","barplot_AnimatePosition","from","onRest","isEqual","BarChart","layout","CartesianGrid","XAxis","axisLine","interval","tickLine","tickFormatter","tick","component_Tooltip","offsetX","offsetY","content","DistricRankingTooltip","YAxis","dataKey","orientation","Label","Bar","index","Cell","undefined","replaceIndicator","selectId","replaceId","selectEmptyIndicator","choosableIndicators","sliderStyle","minHeight","event","indic","direction","getLabelBy","rc_slider_es","step","marks","0.25","0.5","0.75","1","activeDotStyle","trackStyle","handleStyle","legend_LegendItem","DISTRICT_HIGHLIGHT","DISTRICT_HIDE","DISTRICT_ON_HOVER","DISTRICT_OFF_HOVER","getParagraphStyle","top","margin","size","yearText","IndicatorTooltip","getDistrictByName","getObservation","getRectStyle","value_txt","getObservationText","getIndicatorRanking","barplot_IndicatorTooltip","hide","EmptyIndicatorPlot","objectDestructuringEmpty","highlightDistrict","hideDistrict","onHover","offHover","lineRanking","barplot_IndicatorPlot","barplot_EmptyIndicatorPlot","barPlot","additionalColumns","es_Redirect","legend_Legend","parallelLinePlot_ChartContainer","MainNavigation","parallelLinePlot_IndicatorRanking","barplot_DistrictRanking","App","Route","exact","path","IndicatorSelection","IndicatorRating","IndicatorImportance","MainView","indicatorData","require","arrayToObjectById","array","obj","updateOrderedListById","newId","oldId","addIdToOrderedListById","idToRemove","removeIdFromOrderedListById","updetOrderedListBySelectedGroup","onlyNewEntries","ids","districtData","observationData","utilData","rootReducer","combineReducers","arguments","action","toGroupIndicator","indicat","toggledIndicators","_objectSpread7","selectIndicatorConf","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","createMuiTheme","palette","primary","teal","secondary","overrides","MuiFormLabel","MuiFormControlLabel","MuiTooltip","tooltip","tooltipPlacementTop","typography","useNextVariants","ReactDOM","es","HashRouter","MuiThemeProvider_default","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.84b7ae30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/welcome.14e2335c.jpg\";","export enum NegativePositive {\n  Negative = -1,\n  Positive = 1,\n}\n\nexport enum WeightNumber {\n    ONE = 0.25,\n    TWO = 0.5,\n    THREE = 0.75,\n    FOUR = 1\n}\n\nexport interface Indicator {\n    readonly id: string\n    readonly name: string\n    readonly subject: string\n    readonly publication: string\n    readonly year: string\n    readonly yearText: string\n    readonly selected?: boolean\n    readonly valuation: NegativePositive\n    readonly valuationText: string\n    readonly weight: WeightNumber\n    readonly weightText: string\n    readonly description: string\n}\n\nexport interface IndicatorState {\n    readonly byId: {\n        readonly [key: string]: Indicator\n    }\n\n    readonly orderedBySelection: string[]\n}","import * as _ from 'lodash'\nimport { Rootstate } from '../index'\nimport { Indicator } from './types'\n// import { indicator } from './reducer';\n\nconst select = (state: Rootstate) => {\n  return state.indicator\n}\n\n/**\n * Selects all existing indicator\n */\nexport const allIndicators = (state: Rootstate): Indicator[] => {\n  return _.values(select(state).byId)\n}\n\nexport const getIndicator = (state: Rootstate, props: { id: string }): Indicator => {\n  return select(state).byId[props.id]\n}\n\nexport const getGroupedIndicators = (state: Rootstate): { [key: string]: Indicator[] } => {\n  return _.groupBy(_.sortBy(allIndicators(state), 'name'), indicator => indicator.subject)\n}\n\n/**\n * SelectIndicator all selected indicator\n */\nexport const getSelectedIndicators = (state: Rootstate): Indicator[] => {\n  const selectedIndicatorIndexes = state.indicator.orderedBySelection\n  return _.map(selectedIndicatorIndexes, selectedId => {\n    return state.indicator.byId[selectedId]\n  })\n}\n\n/**\n * Get choosable indicators (Selector for dropdown in diagram)\n */\nexport const getChoosableIndicators = (state: Rootstate): Indicator[] => {\n  const indicators = allIndicators(state)\n  return indicators.filter(indicator => !indicator.selected)\n}\n","export const INDICATOR_UPDATE = 'indicator/UPDATE'\nexport type INDICATOR_UPDATE = typeof INDICATOR_UPDATE\n\nexport const INDICATOR_SELECT = 'indicator/SELECT'\nexport type INDICATOR_SELECT = typeof INDICATOR_SELECT\n\nexport const INDICATOR_VALUATION = 'indicator/VALUATION'\nexport type INDICATOR_VALUATION = typeof INDICATOR_VALUATION\n\nexport const INDICATOR_WEIGHT = 'indicator/WEIGHT'\nexport type INDICATOR_WEIGHT = typeof INDICATOR_WEIGHT\n\nexport const INDICATOR_GROUP_SELECTION = 'indicator/GROUP_SELECT'\nexport type INDICATOR_GROUP_SELECTION = typeof INDICATOR_GROUP_SELECTION\n\nexport const REPLACE_SELECTED_INDICATOR = 'indicator/REPLACE_SELECTED_INDICATOR'\nexport type REPLACE_SELECTED_INDICATOR = typeof REPLACE_SELECTED_INDICATOR\n","import * as constants from './constants'\nimport { NegativePositive, WeightNumber } from './types'\n\n/** Combine the three interfaces to one action */\nexport type IndicatorAction =\n  | IndicatorSelection\n  | IndicatorUpdate\n  | SetValuation\n  | SetWeight\n  | IndicatorGroupToggle\n  | ReplaceSelectedIndicator\n\n/**\n * SelectIndicator or deselect indicator interface with payload\n */\nexport interface IndicatorSelection {\n  type: constants.INDICATOR_SELECT\n  payload: {\n    id: string\n    selected: boolean\n  }\n}\n\nexport interface IndicatorUpdate {\n  type: constants.INDICATOR_UPDATE\n  payload: {\n    id: string\n    selected: boolean\n    valuation: NegativePositive\n    weight: WeightNumber\n  }\n}\n\nexport interface SetValuation {\n  type: constants.INDICATOR_VALUATION\n  payload: {\n    id: string\n    valuation: NegativePositive\n  }\n}\n\nexport interface SetWeight {\n  type: constants.INDICATOR_WEIGHT\n  payload: {\n    id: string\n    weight: WeightNumber\n  }\n}\n\nexport interface IndicatorGroupToggle {\n  type: constants.INDICATOR_GROUP_SELECTION\n  payload: {\n    subject: string\n    selected: boolean\n  }\n}\n\nexport interface ReplaceSelectedIndicator {\n  type: constants.REPLACE_SELECTED_INDICATOR\n  payload: {\n    replaceId: string\n    selectId: string\n  }\n}\n\n/**\n * SelectIndicator indicator for ranking\n * @param {string} id of indicator\n * @returns {IndicatorSelection}\n */\nexport function selectIndicator(id: string): IndicatorSelection {\n  return {\n    type: constants.INDICATOR_SELECT,\n    payload: {\n      id,\n      selected: true,\n    },\n  }\n}\n\n/**\n * SelectIndicator indicator for ranking\n * @param {string} id of indicator\n * @returns {IndicatorSelection}\n */\nexport function deselectIndicator(id: string): IndicatorSelection {\n  return {\n    type: constants.INDICATOR_SELECT,\n    payload: {\n      id,\n      selected: false,\n    },\n  }\n}\n\n/**\n * Set positiv valuation for ranking\n * @param {string} id of indicator\n * @returns {SetValuation}\n */\nexport function setPositiveValuation(id: string): SetValuation {\n  return {\n    type: constants.INDICATOR_VALUATION,\n    payload: {\n      id,\n      valuation: NegativePositive.Positive,\n    },\n  }\n}\n\n/**\n * Set negative valuation for ranking\n * @param {string} id of indicator\n * @returns {SetValuation}\n */\nexport function setNegativeValuation(id: string): SetValuation {\n  return {\n    type: constants.INDICATOR_VALUATION,\n    payload: {\n      id,\n      valuation: NegativePositive.Negative,\n    },\n  }\n}\n\nexport function setWeight(id: string, weight: WeightNumber): SetWeight {\n  return {\n    type: constants.INDICATOR_WEIGHT,\n    payload: {\n      id,\n      weight: weight,\n    },\n  }\n}\n\n/**\n * Select all indicators of subject\n * @param subject of indicator group\n * @param selected if the group should be selected, or deselected\n */\nexport function toggleGroupIndicators(subject: string, selected: boolean): IndicatorGroupToggle {\n  return {\n    type: constants.INDICATOR_GROUP_SELECTION,\n    payload: {\n      subject,\n      selected,\n    },\n  }\n}\n\nexport function replaceIndicatorWith(\n  selectId: string,\n  replaceId: string\n): ReplaceSelectedIndicator {\n  return {\n    type: constants.REPLACE_SELECTED_INDICATOR,\n    payload: {\n      selectId,\n      replaceId,\n    },\n  }\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Rootstate } from '../../state/index'\nimport { Indicator } from '../../state/indicator/types'\nimport {\n  deselectIndicator,\n  selectIndicator,\n  toggleGroupIndicators,\n} from '../../state/indicator/actions'\n\ninterface PublicProps {\n  groupName: string\n  value: Indicator[]\n}\n\ntype Props = {\n  select(id: string): void\n  deselect(id: string): void\n  toggleGroup(subject: string, selected: boolean): void\n} & PublicProps\n\nfunction getToggleLabel(label: String) {\n  switch (label) {\n    case 'Gesellschaft und Soziales':\n      return 'Alle gesellschaftlichen Indikatoren'\n    case 'Raum und Umwelt':\n      return 'Alle räumlichen Indikatoren'\n    case 'Wirtschaft und Arbeit':\n      return 'Alle wirtschaftlichen Indikatoren'\n    default:\n      return 'Alle Indikatoren'\n  }\n}\n\nconst IndicatorSelectionGroup: React.SFC<Props> = props => {\n  const { value, groupName, select, deselect, toggleGroup } = props\n  const groupSelectedCount = _.filter(value, indicator => indicator.selected).length\n  return (\n    <div className=\"selectionGroup\">\n      <div className=\"selectionGroupTitle\">\n        {groupName} ({groupSelectedCount})\n      </div>\n      <div className=\"selectionCheckboxes\">\n        {value.map(indicator => (\n          <div key={indicator.id} className=\"selectionCheckbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                id={indicator.id}\n                name={indicator.name}\n                value={indicator.id}\n                checked={indicator.selected || false}\n                onChange={e => {\n                  return e.target.checked ? select(indicator.id) : deselect(indicator.id)\n                }}\n              />\n              {indicator.name}\n            </label>\n          </div>\n        ))}\n      </div>\n      <div className=\"toggleGroup\">\n        <label>\n          <input\n            type=\"checkbox\"\n            id={groupName}\n            value={groupName}\n            checked={groupSelectedCount === value.length}\n            onChange={e => {\n              return toggleGroup(groupName, e.target.checked)\n            }}\n          />\n          {getToggleLabel(groupName)}\n        </label>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  // empty\n})\n\nconst mapDispatchToProps = {\n  select: selectIndicator,\n  deselect: deselectIndicator,\n  toggleGroup: toggleGroupIndicators,\n}\n\nexport default compose<Props, PublicProps>(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(IndicatorSelectionGroup)\n","import * as React from 'react'\nimport c from 'classnames'\nimport { Button } from '@material-ui/core'\nimport * as H from 'history'\nimport { ButtonProps } from '@material-ui/core/Button'\nimport { Link } from 'react-router-dom'\n\ninterface NavButtonProps extends ButtonProps {\n  to: H.LocationDescriptor\n}\n\nconst styleEnabledButton = {\n  backgroundColor: '#225b33',\n  border: '1px solid #225b33',\n  borderRadius: '4px',\n  boxShadow: 'inset 0 1px 1px rgba(0,0,0,0.05)',\n  color: 'white',\n  textTransform: 'none',\n} as React.CSSProperties\n\nconst styleDisabledButton = {\n  backgroundColor: '#f5f5f5',\n  border: '1px solid #cccccc',\n  borderRadius: '4px',\n  boxShadow: 'inset 0 1px 1px rgba(0,0,0,0.05)',\n  color: 'black',\n  textTransform: 'none',\n} as React.CSSProperties\n\n/**\n * Additional functionality for navigation for material ui buttons\n */\nconst NavButton: React.StatelessComponent<NavButtonProps> = ({\n  className,\n  to,\n  children,\n  ...rest\n}) => {\n  return (\n    <Button\n      {...rest}\n      component={b => (\n        <Link\n          to={to}\n          className={c(b.className, className)}\n          style={rest.disabled ? styleDisabledButton : styleEnabledButton}\n        >\n          {b.children}\n        </Link>\n      )}\n    >\n      {children}\n    </Button>\n  )\n}\n\nexport default NavButton\n","import * as React from 'react'\nimport { Grid } from '@material-ui/core'\nimport NavButton from '../customElements/NavButton'\n\ninterface SelectionNavigationProps {\n  valid: boolean\n}\n\nconst SelectionNavigation: React.SFC<SelectionNavigationProps> = ({ valid }) => {\n  return (\n    <div className=\"wizardFooter\">\n      <Grid container justify=\"space-between\">\n        <Grid item xs={2}>\n          {}\n        </Grid>\n        <Grid className={valid ? 'showDescription' : 'hideDescription'} item xs={8}>\n          {}\n          <p className=\"stepper-description text\">\n            «Rangliste erstellen» zeigt direkt die Rangliste als Ergebnis Ihrer Indikatoren-Auswahl\n            an.\n            <br />\n            In diesem Fall wird für jeden ausgewählten Indikator angenommen, dass ein hoher Wert für\n            Sie positiv und der Indikator sehr wichtig ist. Alternativ dazu können Sie die Bewertung\n            und die Gewichtung in separaten Arbeitsschritten für jeden ausgewählten Indikator\n            einzeln anpassen.\n          </p>\n        </Grid>\n\n        <Grid item xs={2}>\n          <NavButton\n            className=\"wizard-right-button\"\n            disabled={!valid}\n            variant=\"contained\"\n            to={'/ranking'}\n          >\n            Weiter zur Bewertung\n          </NavButton>\n          <NavButton\n            className=\"wizard-right-button\"\n            disabled={!valid}\n            variant=\"contained\"\n            to={'/plot'}\n          >\n            Rangliste erstellen\n          </NavButton>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default SelectionNavigation\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { Rootstate } from '../../state'\nimport { getSelectedIndicators } from '../../state/indicator/selectors'\nimport { Redirect } from 'react-router-dom'\nimport { Grid } from '@material-ui/core'\n\ninterface WizardLayoutProps {\n  isValid: boolean\n  ignoreRedirect?: boolean\n}\n\nconst WizardLayout: React.SFC<WizardLayoutProps> = props => {\n  const { children, isValid, ignoreRedirect } = props\n\n  if (!isValid && !ignoreRedirect) {\n    //  Redirect to selection page if nothing is selected in wizard\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <div className=\"floating-container\">\n      <Grid item xs={12}>\n        {children}\n      </Grid>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  isValid: getSelectedIndicators(state).length > 0,\n})\n\nexport default compose(connect(mapStateToProps))(WizardLayout)\n","export const TOGGLE_SELECT_INDICATOR_VISIBILITY = 'toggle/selectIndicatorVisibility';\nexport type TOGGLE_SELECT_INDICATOR_VISIBILITY = typeof TOGGLE_SELECT_INDICATOR_VISIBILITY;\n\nexport const DISABLE_DISCLAIMER = 'toggle/disableDisclaimer';\nexport type DISABLE_DISCLAIMER = typeof DISABLE_DISCLAIMER;\n","import * as constants from './constants'\n\n/**\n * Interface with payload\n */\nexport interface ToggleIndicatorSelectionVisibility {\n  type: constants.TOGGLE_SELECT_INDICATOR_VISIBILITY;\n  payload: {\n    visible: boolean\n  }\n}\n\nexport interface DisableDisclaimer {\n  type: constants.DISABLE_DISCLAIMER;\n  payload: {\n    visible: boolean\n  }\n}\n\nexport type UtilAction = ToggleIndicatorSelectionVisibility | DisableDisclaimer; // type with all interfaces, more with ||\n\n/**\n * Actions with type and payload\n */\nexport const toggleIndicatorSelectionVisibility = (currentVisibility: boolean)\n    : ToggleIndicatorSelectionVisibility => (\n    {\n      type: constants.TOGGLE_SELECT_INDICATOR_VISIBILITY,\n      payload: {\n        visible: !currentVisibility\n      }\n    }\n);\n\nexport const disableDisclaimer = (): DisableDisclaimer => ({\n  type: constants.DISABLE_DISCLAIMER,\n  payload: {\n    visible: false\n  }\n});\n\n","import { Rootstate } from '../index';\n\nconst select = (state: Rootstate)  => {\n  return state.util;\n};\n\n/**\n * Selects Util\n */\nexport const getUtil = (state: Rootstate) => {\n  return select(state);\n};\n\nexport const getShowDisclaimer = (state: Rootstate) => {\n  return state.util.showDisclaimer;\n}","import * as React from 'react'\nimport Icon from '@material-ui/core/Icon'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Rootstate } from '../../state'\nimport { disableDisclaimer } from '../../state/util/actions'\nimport { getShowDisclaimer } from '../../state/util/selectors'\n\nimport './disclaimer.css'\n\nexport interface PublicProps {\n  // empty\n}\n\ntype Props = {\n  disableDisclaimer(visible: boolean): void\n  showDisclaimer: boolean\n} & PublicProps\n\nconst Disclaimer: React.SFC<Props> = props => {\n  const { disableDisclaimer, showDisclaimer } = props\n  if (!showDisclaimer) {\n    return null\n  }\n  return (\n    <div className=\"right-grid disclaimer-main-view disclaimer\">\n      <div className=\"disclaimerText\">\n        Die von Ihnen vorgenommenen Einstellungen (Auswahl, Bewertung und Gewichtung) werden nicht\n        gespeichert.\n        <br />\n        Sie werden ausschliesslich für die Berechnung der Rangliste genutzt.\n      </div>\n      <div className=\"disclaimerButton\">\n        <button className=\"disclaimerCloseButton\" onClick={() => disableDisclaimer(false)}>\n          <Icon>cancel</Icon>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  showDisclaimer: getShowDisclaimer(state),\n})\n\nconst mapDispatchToProps = {\n  disableDisclaimer: disableDisclaimer,\n}\n\nexport default compose<Props, PublicProps>(\n  // withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(Disclaimer)\n","import welcomeImage from '../assets/welcome.jpg';\nimport * as React from 'react';\n\nexport const welcome: React.SFC<string> = (text: string) =>\n  (<div>\n    <h1 className=\"welcome-title\"> Finden Sie Ihr Lieblingswohnviertel </h1>\n    {text}\n    <img className=\"welcome-img\" src={welcomeImage}/>\n  </div>)\n;","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Rootstate } from '../state/index'\nimport { getGroupedIndicators, getSelectedIndicators } from '../state/indicator/selectors'\nimport { Indicator } from '../state/indicator/types'\n// import Grid from '@material-ui/core/Grid'\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles'\nimport IndicatorSelectionGroup from '../component/selection/IndicatorSelectionGroup'\nimport SelectionNavigation from '../component/navigation/SelectionNavigation'\nimport WizardLayout from '../component/layout/WizardLayout'\nimport Disclaimer from '../component/disclaimer/Disclaimer'\nimport { welcome } from './welcome';\n\nexport interface PublicProps {\n}\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      paddingTop: 16,\n      paddingBottom: 16,\n      marginTop: theme.spacing.unit * 3,\n      paddingLeft: theme.spacing.unit * 3,\n    },\n    title: {\n      padding: theme.spacing.unit * 2,\n    },\n  })\n\nexport type Props = {\n  groupedIndicators: { [key: string]: Indicator[] }\n  valid: boolean\n} & WithStyles<typeof styles>\n\nconst IndicatorSelection: React.SFC<Props> = props => {\n  const { groupedIndicators, valid } = props\n  const numIndicators = _.reduce(\n    groupedIndicators,\n    (sum, indicatorGroup) => indicatorGroup.length + sum,\n    0\n    )\n    return (\n    <WizardLayout ignoreRedirect>\n\n      {welcome(\n        `Herzlich willkommen bei \\u00ABFinden Sie Ihr Lieblingswohnviertel\\u00BB!\n          Auf dieser Seite können Sie Ihre ganz persönliche Rangliste der\n          Basler Wohnviertel und Gemeinden erstellen.\n        `\n      )}\n      <div className=\"wizardDescription text\">\n        Bitte wählen Sie in einem ersten Schritt zwischen 1 und {numIndicators} Indikatoren aus,\n        welche in die Index-Berechnung einfliessen sollen.\n        <br/>\n        In einem nächsten Schritt können Sie bestimmen, ob Sie einen hohen Wert eines Indikators als\n        positiv oder als negativ beurteilen.\n        <br/>\n        Im dritten Schritt können Sie festlegen, mit welcher Gewichtung ein ausgewählter Indikator\n        in Ihre Berechnung einfliessen soll.\n      </div>\n      <div className=\"mainFrame\">\n        <h2 className=\"wizardTitle\">\n          Schritt 1: Wählen Sie mindestens einen Indikator aus.\n        </h2>\n        <div className=\"selections\">\n          {_.map(groupedIndicators, (value, key) => (\n            <IndicatorSelectionGroup key={key} groupName={key} value={value}/>\n          ))}\n        </div>\n        <SelectionNavigation valid={valid} />\n        <Disclaimer />\n      </div>\n    </WizardLayout>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  groupedIndicators: getGroupedIndicators(state),\n  valid: getSelectedIndicators(state).length > 0,\n})\n\nconst mapDispatchToProps = {}\n\nexport default compose<Props, PublicProps>(\n  withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(IndicatorSelection)\n","import { LineRank } from '../state/observation/types'\nimport { Indicator, NegativePositive, WeightNumber } from '../state/indicator/types'\nimport { District } from '../state/district/types'\nimport { reduce } from 'lodash'\n\nexport const getRankingColor = (rank: LineRank): string => {\n  if (rank.highlighted && rank.hover) {\n    return '#4d00ff'\n  } else {\n    return 'black'\n  }\n}\n\nexport const getLineStroke = (rank: LineRank): string => {\n  if (rank.highlighted || rank.hover) {\n    return '2'\n  }\n  return '1'\n}\n\nexport const getColor = (positive: boolean): React.CSSProperties => {\n  if (positive) {\n    return {\n      borderColor: '#0387c1',\n      backgroundColor: '#0387c1',\n    }\n  } else {\n    return {\n      borderColor: '#e54803',\n      backgroundColor: '#e54803',\n    }\n  }\n}\n\nexport const getClassNameSelectedUnselected = (\n  indicator: Indicator,\n  buttonType: string\n): string => {\n  if (indicator.valuation === -1 && buttonType === 'negative') {\n    return ' negative-selected'\n  } else if (indicator.valuation === 1 && buttonType === 'negative') {\n    return ' negative-unselected'\n  } else if (indicator.valuation === 1 && buttonType === 'positive') {\n    return ' positive-selected'\n  } else if (indicator.valuation === -1 && buttonType === 'positive') {\n    return ' positive-unselected'\n  }\n  return ''\n}\n\nexport const getClassNameNegPosBorder = (indicator: Indicator): string => {\n  switch (indicator.valuation) {\n    case NegativePositive.Negative:\n      return ' negative-border '\n    case NegativePositive.Positive:\n      return ' positive-border '\n    default:\n      return ''\n  }\n}\n\nexport const getClassNameNegPos = (indicator: Indicator): string => {\n  switch (indicator.valuation) {\n    case NegativePositive.Negative:\n      return ' negative '\n    case NegativePositive.Positive:\n      return ' positive '\n    default:\n      return ''\n  }\n}\n\nexport const labels = ['sehr unwichtig', 'eher unwichtig', 'eher wichtig', 'sehr wichtig']\n\nexport const getLabelBy = (weight: WeightNumber): string => {\n  switch (weight) {\n    case WeightNumber.ONE:\n      return labels[0]\n    case WeightNumber.TWO:\n      return labels[1]\n    case WeightNumber.THREE:\n      return labels[2]\n    case WeightNumber.FOUR:\n      return labels[3]\n    default:\n      return ''\n  }\n}\n\nexport const anyUserSelection = (districts: District[]): boolean =>\n  districts.map(d => d.viewOptions.highlight).reduce((a, b) => a || b)\n\nexport const getRankPosition = (\n  data: { value: number; id: string }[]\n): { [id: string]: number } => {\n  return reduce(\n    data,\n    (accu, entry, idx) => {\n      return {\n        ...accu,\n        [entry.id]: idx * 22.27 + 7.22,\n      }\n    },\n    {}\n  )\n}\n/**\n * Convert the decimal point into a comma.\n * \n * @param num the number to convert\n */\nexport const convertDecimalPoint = (num: any): String => {\n  return num.toString().replace('.', ',');\n}\n\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Rootstate } from '../../state'\nimport { getSelectedIndicators } from '../../state/indicator/selectors'\nimport { Indicator } from '../../state/indicator/types'\n// import Grid from '@material-ui/core/Grid'\n// import { Theme, WithStyles, withStyles, createStyles } from '@material-ui/core/styles'\n// import Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\nimport { setNegativeValuation, setPositiveValuation } from '../../state/indicator/actions'\nimport { getClassNameSelectedUnselected } from '../../helpers'\n\nexport interface PublicProps {\n  indicator: Indicator\n}\n\ntype Props = {\n  positiveValuation(id: string): void\n  negativeValuation(id: string): void\n} & PublicProps\n\nconst IndicatorRatingLine: React.SFC<Props> = props => {\n  const { positiveValuation, negativeValuation, indicator } = props\n  return (\n    <div className=\"ratingLine\">\n      <div className=\"ratingLineText\">\n        <p>&#x25BA; {indicator.valuationText} ...</p>\n      </div>\n      <div className=\"ratingLineButtons\">\n        <button\n          className={'ratingButton' + getClassNameSelectedUnselected(indicator, 'positive')}\n          onClick={() => positiveValuation(indicator.id)}\n        >\n          <Icon style={{ paddingRight: '5px' }}>mood</Icon>\n          Positiv\n        </button>\n\n        <button\n          className={'ratingButton' + getClassNameSelectedUnselected(indicator, 'negative')}\n          onClick={() => negativeValuation(indicator.id)}\n        >\n          <Icon style={{ paddingRight: '5px' }}>mood_bad</Icon>\n          Negativ\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  selectedIndicators: getSelectedIndicators(state),\n})\n\nconst mapDispatchToProps = {\n  positiveValuation: setPositiveValuation,\n  negativeValuation: setNegativeValuation,\n}\n\nexport default compose<Props, PublicProps>(\n  // withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(IndicatorRatingLine)\n","import { Grid } from '@material-ui/core'\nimport NavButton from '../customElements/NavButton'\nimport * as React from 'react'\n\ninterface RatingNavigationProps {}\n\nconst RatingNavigation: React.SFC<RatingNavigationProps> = props => {\n  return (\n    <div className=\"wizardFooter\">\n      <Grid container justify=\"flex-end\">\n        <Grid item xs={2}>\n          <NavButton className=\"wizard-left-button\" variant=\"contained\" to=\"/\">\n            Zurück zur Auswahl\n          </NavButton>\n        </Grid>\n\n        <Grid item xs={8}>\n          <p className=\"stepper-description text\">\n            «Rangliste erstellen» zeigt direkt die Rangliste als Ergebnis Ihrer Indikatoren-Auswahl\n            und der oben eingestellten Bewertung der Indikatoren an. Alle Indikatoren fliessen mit\n            demselben Gewicht von 1 (= sehr wichtig) in die Berechnung ein. Alternativ dazu können\n            Sie die Gewichtung im nächsten Arbeitsschritt für jeden ausgewählten Indikator anpassen.\n          </p>\n        </Grid>\n\n        <Grid item xs={2}>\n          <NavButton className=\"wizard-right-button\" variant=\"contained\" to={'/importance'}>\n            Weiter zur Gewichtung\n          </NavButton>\n          <NavButton className=\"wizard-right-button\" variant=\"contained\" to={'/plot'}>\n            Rangliste erstellen\n          </NavButton>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default RatingNavigation\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { Rootstate } from '../state/index'\nimport { getSelectedIndicators } from '../state/indicator/selectors'\nimport { Indicator } from '../state/indicator/types'\nimport { toggleIndicatorSelectionVisibility } from '../state/util/actions'\n// import Grid from '@material-ui/core/Grid'\nimport IndicatorRatingLine from '../component/selection/IndicatorRatingLine'\nimport RatingNavigation from '../component/navigation/RatingNavigation'\nimport WizardLayout from '../component/layout/WizardLayout'\nimport Disclaimer from '../component/disclaimer/Disclaimer'\nimport { welcome } from './welcome';\n\nexport interface Props {\n  selectedIndicators: Indicator[]\n\n  positiveValuation(id: string): void\n\n  negativeValuation(id: string): void\n\n  toggleVisibility(visibility: boolean): void\n}\n\nconst IndicatorRating: React.SFC<Props> = props => {\n  const { selectedIndicators } = props\n\n  return (\n    <WizardLayout>\n\n      {welcome(\n        `Erstellen Sie Ihre ganz persönliche Rangliste der Basler Wohnviertel und Gemeinden!`\n      )}\n\n      <div className=\"wizardDescription text\">\n        Bitte legen Sie hier für jeden Indikator fest, ob ein hoher Wert für Sie positiv oder\n        negativ ist.\n        <br />\n        Ein Beispiel: Wenn Sie keinen hohen Anteil an Einfamilienhäusern haben wollen, weisen Sie dem\n        entsprechenden Indikator das Attribut «negativ» zu.\n        <br />\n        Die Ausgangseinstellung ist für jeden ausgewählten Indikator «positiv» gesetzt.\n      </div>\n      <div className=\"mainFrame\">\n        <h2 className=\"wizardTitle\">\n          Schritt 2: Legen Sie fest, ob ein hoher Wert eines Indikators positiv oder negativ ist.\n        </h2>\n        <div className=\"rating\">\n          <div className=\"ratingLeft\">\n            {selectedIndicators.map(indicator => {\n              return <IndicatorRatingLine key={indicator.id} indicator={indicator} />\n            })}\n          </div>\n          <div className=\"raitingRight\">\n            {selectedIndicators.map(indicator => {\n              return (\n                <div className=\"indicatorRatingDescription\" key={indicator.id}>\n                  {indicator.description}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <RatingNavigation />\n        <Disclaimer />\n      </div>\n    </WizardLayout>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  selectedIndicators: getSelectedIndicators(state),\n})\n\nconst mapDispatchToProps = {\n  toggleVisibility: toggleIndicatorSelectionVisibility,\n}\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(IndicatorRating)\n","import * as React from 'react'\nimport './tooltip.css'\n\nexport interface PublicProps {\n  title: string,\n  description: string\n}\n\nexport type TooltipState = {\n  displayTooltip: boolean;\n}\n\nconst tooltipStyle = {\n  color: '#386c8e',\n  fontWeight: 'bold',\n} as React.CSSProperties\n\nconst tooltipTitleStyle = {\n  fontWeight: 'bold',\n} as React.CSSProperties\n\n/**\n * Additional functionality for navigation for material ui buttons\n */\nclass Tooltip extends React.Component<PublicProps, TooltipState> {\n\n  constructor(props: PublicProps) {\n    super(props)\n    this.state = {\n      displayTooltip: false\n    }\n    this.hideTooltip = this.hideTooltip.bind(this)\n    this.showTooltip = this.showTooltip.bind(this);\n  }\n\n  hideTooltip(): void {\n    this.setState(\n       {displayTooltip: false}\n    )\n  }\n\n  showTooltip(): void {\n    this.setState(\n       {displayTooltip: true}\n    )\n  }\n  \n  render() {\n    const {title, description, children} = this.props;\n\n    return (\n      <span className='tooltip'\n          onMouseLeave={this.hideTooltip}\n          style={tooltipStyle}\n      >\n        {this.state.displayTooltip &&\n        <div className={`tooltip-bubble tooltip-top`}>\n          <div className='tooltip-message'><span style={tooltipTitleStyle}>{title}:</span> {description}</div>\n        </div>\n        }\n        <span \n          className='tooltip-trigger'\n          onMouseOver={this.showTooltip}\n          style={tooltipStyle}\n          >\n          {children}\n        </span>\n      </span>\n    )\n  }\n}\n\nexport default Tooltip;\n\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Rootstate } from '../../state'\n// import { Tooltip } from '@material-ui/core'\nimport Tooltip from '../customElements/Tooltip'\nimport { getSelectedIndicators } from '../../state/indicator/selectors'\nimport { Indicator, WeightNumber } from '../../state/indicator/types'\nimport Grid from '@material-ui/core/Grid'\nimport { Theme, WithStyles, createStyles } from '@material-ui/core/styles'\nimport { withStyles } from '@material-ui/core/styles'\nimport { setWeight } from '../../state/indicator/actions'\nimport { labels } from '../../helpers'\nimport FormLabel from '@material-ui/core/FormLabel'\n\nexport interface PublicProps {\n  indicator: Indicator\n}\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: '5px',\n    },\n    checked: {\n      color: '#1d4e2c',\n      '&$checked': {\n        color: '#1d4e2c',\n      },\n    },\n    title: {\n      padding: theme.spacing.unit * 2,\n      textAlign: 'center',\n      color: '#1D4E2C',\n    },\n    leftIcon: {\n      marginRight: theme.spacing.unit,\n      marginBottom: theme.spacing.unit,\n    },\n    textCentered: {\n      display: 'inline-block',\n    },\n    sizeIcon: {\n      fontSize: 20,\n    },\n  })\n\ntype Props = {\n  setIndicatorWeight(id: string, weight: WeightNumber): void\n} & PublicProps &\n  WithStyles<typeof styles>\n\nconst IndicatorImportanceLine: React.SFC<Props> = props => {\n  const { classes, indicator, setIndicatorWeight } = props\n  let indexPrefix = indicator.weightText.indexOf(indicator.name.split(' ')[0])\n  /* Hack for Sesshaftigkeit */\n  if (indexPrefix === -1) {\n    indexPrefix = 4\n  }\n  const prefix = indicator.weightText.substring(0, indexPrefix)\n  const suffixIndex = indicator.weightText.indexOf(' ', indexPrefix + indicator.name.length)\n  const suffix = indicator.weightText.substring(suffixIndex, indicator.weightText.length)\n  const text = indicator.weightText.substring(indexPrefix, suffixIndex)\n  return (\n    <Grid container alignItems=\"center\" style={{ paddingTop: '5px', paddingBottom: '5px' }}>\n      <Grid item xs={6}>\n        <p>\n          &#x25BA; {prefix}{' '}\n          <Tooltip title={text} description={indicator.description}>{text}</Tooltip>\n          {suffix} ...\n        </p>\n      </Grid>\n      <Grid item xs={6}>\n        <Grid container spacing={0}>\n          {[WeightNumber.ONE, WeightNumber.TWO, WeightNumber.THREE, WeightNumber.FOUR].map(\n            (weight, idx) => (\n              <Grid item xs={3} key={indicator.id + weight.toString()}>\n                <input\n                  type=\"radio\"\n                  id={indicator.id + weight.toString()}\n                  checked={indicator.weight === weight}\n                  className={classes.root}\n                  onChange={value => setIndicatorWeight(indicator.id, weight)}\n                  value={weight.toString()}\n                  name={indicator.id}\n                />\n                <FormLabel htmlFor={indicator.id + weight.toString()}>{labels[idx]}</FormLabel>\n              </Grid>\n            )\n          )}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate, ownProps: PublicProps) => ({\n  selectedIndicators: getSelectedIndicators(state),\n  ...ownProps,\n})\n\nconst mapDispatchToProps = {\n  setIndicatorWeight: setWeight,\n}\n\nexport default compose<Props, PublicProps>(\n  withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(IndicatorImportanceLine)\n","import { Grid } from '@material-ui/core'\nimport NavButton from '../customElements/NavButton'\nimport * as React from 'react'\n\ninterface WeightNavigationProps {}\n\nconst WeightNavigation: React.SFC<WeightNavigationProps> = props => {\n  return (\n    <div className=\"wizardFooter\">\n      <Grid container justify=\"flex-end\">\n        <Grid item xs={2}>\n          <NavButton className=\"wizard-left-button\" variant=\"contained\" to={'/ranking'}>\n            Zurück zur Bewertung\n          </NavButton>\n          <NavButton className=\"wizard-left-button\" variant=\"contained\" to=\"/\">\n            Zurück zur Auswahl\n          </NavButton>\n        </Grid>\n\n        <Grid item xs={8}>\n          <p className=\"stepper-description text\">\n            «Rangliste erstellen» zeigt die Rangliste als Ergebnis Ihrer Indikatoren-Auswahl und der\n            oben eingestellten Gewichtung der Indikatoren an. Alle Bewertungen und Gewichtungen\n            können auch direkt in der Ergebnisdarstellung beliebig oft neu eingestellt werden.\n          </p>\n        </Grid>\n\n        <Grid item xs={2}>\n          <NavButton className=\"wizard-right-button\" variant=\"contained\" to={'/plot'}>\n            Rangliste erstellen\n          </NavButton>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default WeightNavigation\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Rootstate } from '../state/index'\nimport { getSelectedIndicators } from '../state/indicator/selectors'\nimport { Indicator } from '../state/indicator/types'\nimport { Theme, WithStyles, withStyles, createStyles } from '@material-ui/core/styles'\nimport IndicatorImportanceLine from '../component/selection/IndicatorImportanceLine'\nimport WeightNavigation from '../component/navigation/WeightNavigation'\nimport WizardLayout from '../component/layout/WizardLayout'\nimport Disclaimer from '../component/disclaimer/Disclaimer'\nimport { welcome } from './welcome';\n\nexport interface Props {\n  selectedIndicators: Indicator[]\n\n  positiveValuation(id: string): void\n\n  negativeValuation(id: string): void\n\n  toggleVisibility(visibility: boolean): void\n}\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    leftIcon: {\n      marginRight: theme.spacing.unit,\n    },\n  })\n\nconst IndicatorWeight: React.SFC<Props & WithStyles<typeof styles>> = props => {\n  const { selectedIndicators } = props\n  return (\n    <WizardLayout>\n      {welcome(\n        `Erstellen Sie Ihre ganz persönliche Rangliste der Basler Wohnviertel und Gemeinden!`\n      )}\n\n      <div className=\"wizardDescription text\">\n        Bitte weisen Sie jedem ausgewählten Indikator ein individuelles Gewicht zu und bestimmen Sie\n        somit, wie wichtig er für die Berechnung Ihrer Wohnviertel-Rangliste sein soll. Folgende\n        Gewichtungs-Einstellungen stehen zur Auswahl: <br />\n        positiv: sehr unwichtig = Gewicht von 0,25, eher unwichtig = Gewicht von 0,5, eher wichtig =\n        Gewicht von 0,75, sehr wichtig = Gewicht von 1. <br />\n        negativ: sehr unwichtig = Gewicht von -0,25, eher unwichtig = Gewicht von -0,5, eher wichtig\n        = Gewicht von -0,75, sehr wichtig = Gewicht von -1.\n      </div>\n      <div className=\"mainFrame\">\n        <h2 className=\"wizardTitle\">\n          Schritt 3: Geben Sie an, wie wichtig der Indikator für Sie ist.\n        </h2>\n        <div className=\"contentBox\">\n          {selectedIndicators.map(indicator => {\n            return <IndicatorImportanceLine key={indicator.id} indicator={indicator} />\n          })}\n        </div>\n\n        <WeightNavigation />\n        <Disclaimer />\n      </div>\n    </WizardLayout>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  selectedIndicators: getSelectedIndicators(state),\n})\n\nconst mapDispatchToProps = {}\n\nexport default compose<Props & WithStyles<typeof styles>, {}>(\n  withStyles(styles),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(IndicatorWeight)\n","import * as _ from 'lodash'\nimport { Rootstate } from '../index'\nimport { District } from './types'\n\nconst select = (state: Rootstate) => {\n  return state.district\n}\n\n/**\n * Selects all existing districts\n */\nexport const allDistricts = (state: Rootstate) => {\n  return _.values(select(state).byId)\n}\n\nexport const allDistrictsById = (state: Rootstate) => {\n  return select(state).byId\n}\n\n/**\n * Get a district by name.\n * \n * @param name the name of the district\n * @param state the state of the application\n */\nexport const districtByName = (name: string, state: Rootstate): District => {\n  return allDistricts(state).filter(district => district.name === name)[0]\n}\n\n/**\n * Selects one district\n */\nexport const getDistrictBy = (districtId: string, state: Rootstate): District => {\n  const success: District | undefined = allDistricts(state)\n    .filter(district => district.id === districtId)\n    .pop()\n\n  if (success) {\n    return success\n  } else {\n    throw new ReferenceError('Could not find district with id: ' + districtId)\n  }\n}\n","import * as _ from 'lodash'\nimport { createSelector } from 'reselect'\nimport { Rootstate } from '../index'\nimport { getIndicator, getSelectedIndicators } from '../indicator/selectors'\nimport { Color, LineRank, Observation, Rank } from './types'\nimport { Indicator } from '../indicator/types'\nimport { getDistrictBy } from '../district/selectors'\n\n/**\n * Get all observations from state without any filter\n * @param {Rootstate} state\n * @returns { {[p: string]: Observation} } Observations listed byId\n */\nconst getObservations = (state: Rootstate) => {\n  return state.observation.byId\n}\n\nexport const getAllObservations = (state: Rootstate) => {\n  return _.values(state.observation.byId)\n}\n\n/**\n * Group observations by district\n * @returns { [districtId: string]: Observation[] }\n */\nexport const groupObservationsByDistrict = createSelector(\n  [getObservations],\n  observations => {\n    return _.groupBy(observations, 'districtId')\n  }\n)\n\n/**\n * Calculate the average value of all observations with a reference to indicator\n * @param { Observation[] } observations of indicator or all observations\n * @param { Indicator } indicator to check if its related\n * @returns {number} floating point number of average\n */\nexport const getAverageValue = (observations: Observation[], indicator: Indicator) => {\n  let cnt = 0\n  // Sum all observations with indicator\n  const total = _.reduce(\n    observations,\n    (result, observation, key) => {\n      if (observation.indicatorId === indicator.id) {\n        cnt = cnt + 1\n        return result + observation.normValue\n      }\n      return result\n    },\n    0\n  )\n  if (cnt === 0) {\n    return total\n  }\n  return total / cnt\n}\n\n/**\n * Same as getAverageValue with multiplication and weight (0.25 - 1)\n * if valuation -1 subtraction of weighted average from 1\n * @param {Observation[]} observations\n * @param {Indicator} indicator\n * @returns {number}\n */\nexport const getWeightedAverageValue = (observations: Observation[], indicator: Indicator) => {\n  return getAverageValue(observations, indicator) * indicator.valuation * indicator.weight\n  /* Same as getAverageValue with multiplication and weight (0.25 - 1)\n   * if valuation -1 subtraction of weighted average from 1\n  \n  return indicator.valuation === 1 ?\n      getAverageValue(observations, indicator) * indicator.weight\n      : 1 - getAverageValue(observations, indicator) * indicator.weight;\n      */\n}\n\n/**\n * Get weighted ranking with all selected indicators per district\n * @returns {Rank[]} per district\n */\nexport const getGlobalRanking = createSelector(\n  [getSelectedIndicators, groupObservationsByDistrict],\n  (selectedIndicators, groupedByDistrict): Rank[] => {\n    if (selectedIndicators.length === 0) {\n      return []\n    }\n\n    // Get Rank per Util\n    return _.map(groupedByDistrict, observations => {\n      const total = _.reduce(\n        selectedIndicators,\n        (result, selectedIndicator, key) => {\n          return result + getWeightedAverageValue(observations, selectedIndicator)\n        },\n        0\n      )\n      return {\n        districtId: observations[0].districtId,\n        value: total / selectedIndicators.length,\n      }\n    })\n  }\n)\n\n/**\n * Sorted weighted ranking with all selected indicators per district by value\n * @returns {Rank[]} sorted ranking list\n */\nexport const getSortedGlobalRanking = createSelector(\n  [getGlobalRanking],\n  (globalRanking): Rank[] => {\n    return _.sortBy(globalRanking, 'value').reverse()\n  }\n)\n\n/**\n * This function accepts an additional prop {id: string}, see getIndicator\n * Returns a weighted Rank[] of the corresponding indicator\n * @returns {Rank[]} sorted the same way as getSortedGlobalRanking\n */\nexport const makeGetIndicatorRanking = () => {\n  return createSelector(\n    [groupObservationsByDistrict, getSortedGlobalRanking, getIndicator],\n    (groupedByDistrict, sortedRanking, indicator): Rank[] => {\n      // Get Rank per Util\n      const rankings = _.map(groupedByDistrict, observations => {\n        // Do weight, but only positive in this case\n        const total = Math.abs(getWeightedAverageValue(observations, indicator))\n\n        return {\n          districtId: observations[0].districtId,\n          value: total,\n        }\n      })\n\n      // Sort indicator rankings by sorted global ranking\n      return _.sortBy(rankings, [\n        function(ranking: Rank) {\n          return _.findIndex(sortedRanking, { districtId: ranking.districtId })\n        },\n      ])\n    }\n  )\n}\n\n/**\n * Maps quartierindex data model to Rechart data model\n * @param {{indicator: Indicator; districtRank: Rank[]}} indicatorRanking\n * @param {Rootstate} state\n * @returns {{name: string, indicatorName1: number, indicatorName2: number, ..., indicatorNameN}[]}\n */\nconst mapToRechartsDataModel = (\n  indicatorRanking: { indicator: Indicator; districtRank: Rank[] },\n  state: Rootstate\n) => {\n  const dataModel = { name: indicatorRanking.indicator.name }\n\n  indicatorRanking.districtRank.forEach(districtIdAndRankValue => {\n    const districtName = getDistrictBy(districtIdAndRankValue.districtId, state).name\n\n    dataModel[districtName] = districtIdAndRankValue.value\n  })\n  return dataModel\n}\n\n/**\n * Returns the ranking as it is required by Recharts\n * the rank of all selected indicators will be retrieved\n * @param {Rootstate} state\n * @returns {{name: string, indicatorName1: number, indicatorName2: number, ..., indicatorNameN}[]}\n */\nexport const getRankingDataForChart = (state: Rootstate) => {\n  const selectedIndicators = getSelectedIndicators(state)\n  const getIndicatorRanking = makeGetIndicatorRanking()\n\n  const indicatorRanking = selectedIndicators\n    .map(indicator => ({\n      indicator: indicator,\n      districtRank: getIndicatorRanking(state, { id: indicator.id }),\n    }))\n    .map(r => mapToRechartsDataModel(r, state))\n\n  return indicatorRanking\n}\n\nconst toLineRank = (rank: Rank, state: Rootstate): LineRank => {\n  const green: Color = { h: 128, s: 80 * rank.value, v: 50 }\n  const red: Color = { h: 348, s: 95 * (1 - rank.value), v: 50 }\n  const color: Color = rank.value > 0.5 ? green : red\n\n  const lineRank: LineRank = {\n    objectId: rank.districtId,\n    labelText: getDistrictBy(rank.districtId, state).name,\n    rankValue: rank.value,\n    color: color,\n    highlighted: getDistrictBy(rank.districtId, state).viewOptions.highlight,\n    hover: getDistrictBy(rank.districtId, state).viewOptions.hover,\n  }\n\n  return lineRank\n}\n\nexport const getLineRanking = (state: Rootstate) =>\n  getSortedGlobalRanking(state).map(rank => toLineRank(rank, state))\n","import React from 'react'\nimport { trim } from 'lodash'\nimport { LabelProps, ContentRenderer } from 'recharts'\n\nconst DistrictLabel: ContentRenderer<LabelProps> = props => {\n  const { x, y, width, height, value } = props\n\n  let xNew = 0\n  let text = value\n  switch (value[0]) {\n    // single number 1-9\n    case ' ': {\n      xNew = x + 6.5\n      break\n    }\n    // Basel-Stadt special\n    case 'X': {\n      xNew = x + 20.5\n      if (typeof value === 'string') {\n        text = value.substr(1)\n      }\n      break\n    }\n    // multi number 10-99\n    default:\n      xNew = x\n      break\n  }\n  // const xNew = value[0] === ' ' ? x + 6.5 : x\n  const yNew = y + 12.5\n\n  return (\n    <text\n      width={width}\n      height={height}\n      x={xNew}\n      y={yNew}\n      fill={'black'}\n      className=\"recharts-text recharts-cartesian-axis-tick-value\"\n      textAnchor=\"start\"\n    >\n      {value[0] === 'X' ? (\n        <tspan className=\"bold\">{trim(text.toString())}</tspan>\n      ) : (\n        <tspan>{trim(text.toString())}</tspan>\n      )}\n    </text>\n  )\n}\n\nexport default DistrictLabel\n","import React from 'react'\nimport { Spring, SpringProps, config } from 'react-spring'\n\ntype Props = {} & SpringProps\n\nconst AnimatePosition: React.SFC<Props> = ({ children, ...rest }) => {\n  return (\n    <Spring config={{ ...config.gentle, precision: 0.5, velocity: 80 }} {...rest}>\n      {children}\n    </Spring>\n  )\n}\n\nexport default AnimatePosition\n","import * as React from 'react'\nimport { TooltipProps } from 'recharts'\nimport './districtRankingTooltip.css'\n\nclass DistrictRankingTooltip extends React.Component<TooltipProps> {\n\n  constructor(props: TooltipProps) {\n    super(props)\n  }\n\n  getStyle(id: string): React.CSSProperties {\n    if (id === '99') {\n      return {\n        borderStyle: 'solid',\n        borderWidth: '1px',\n        borderColor: 'black'\n      }\n    }\n    return {\n      borderStyle: 'solid',\n      borderWidth: '1px',\n      borderColor: '#FFD300'\n    }\n  }\n\n  getDistrictName(rankName: string): string {\n    if (rankName.includes('X')) {\n      return 'Kanton Basel-Stadt'\n    }\n    return rankName.split('.').slice(1).join().trim();\n  }\n\n  render() {\n    const {active} = this.props;\n\n    if (active) {\n      const {payload} = this.props;\n      let style = this.getStyle(payload[0].payload.id);\n      let value = payload[0].value.toString().replace('.', ',')\n      return (\n        <div className=\"districtRankingTooltip\">\n          <svg width={155} height={74} viewBox=\"-10 -4 190 80\" style={{position: 'absolute', zIndex: -1}}>\n            <rect x=\"0\" y=\"0\" rx=\"5\" ry=\"5\" width=\"155\" height=\"74\"\n                  style={{fill: 'white', stroke: style.borderColor, strokeWidth: 1}}/>\n            <rect x=\"-4\" y=\"27\" width=\"10\" height=\"10\" transform=\"rotate(45 -4 32)\"\n                  style={{fill: 'white', stroke: style.borderColor, strokeWidth: 1}}/>\n            <rect x=\"-2\" y=\"26\" width=\"11\" height=\"11\" transform=\"rotate(45 -2 31)\"\n                  style={{fill: 'white', stroke: 'white', strokeWidth: 1}}/>\n          </svg>\n\n          <div style={{padding: 5, paddingLeft: 20}}>\n            <p>Berechneter Wert<br />\n            {this.getDistrictName(payload[0].payload.name)}<br />\n            {value} </p>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  }\n};\n\nexport default DistrictRankingTooltip;\n  ","import { AxisDomain } from 'recharts';\n\nexport const asDomain = (ticks: number[])\n  : [AxisDomain, AxisDomain] => {\n  if (ticks.length === 0) return [0, 0]\n  else return [ticks[0], ticks[ticks.length - 1]]\n}\n\nexport const getTicks = (\n  data: { id: string; name: string; value: number }[]\n)\n  : number[] => {\n  const minMax = getMinMax(data)\n  const ticks = getBaseTicks(minMax)\n  return ticks\n}\n\nconst getBaseTicks = (minMax: { min: Number, max: Number })\n  : number[] => {\n\n  const min = minMax.min\n  const max = minMax.max\n\n  const getDecimals = (n: Number): Number => {\n    const nAsString = n.toString().replace('.', '').replace('-', '')\n    if (nAsString.charAt(0) !== '0') {\n      return 0\n    } else {\n      let decimal = 1\n      while (nAsString.charAt(decimal) === '0') {\n        decimal++\n      }\n\n      return decimal\n    }\n  }\n\n\n  const getSmallerDecimal = (): Number => {\n    const minDecimal = getDecimals(min)\n    const maxDecimal = getDecimals(max)\n    if (minDecimal > maxDecimal) return maxDecimal\n    else return minDecimal\n  }\n\n  const decimals = getSmallerDecimal()\n  const minTick = (): number => {\n    return Number((min.valueOf() - Math.pow(10, -decimals.valueOf())).toFixed(decimals.valueOf()))\n  }\n\n  const maxTick = (): number => {\n    if (max === 1) {\n      return 1\n    } else {\n      const roundingErrorCorrection = Math.pow(10, -decimals)\n      return Number((Number(max.toFixed(decimals.valueOf())) + roundingErrorCorrection).toFixed(decimals.valueOf()))\n    }\n  }\n\n  const withMiddleTick = (minTick: number, maxTick: number): number[] => {\n    let diff = 0\n    if (minTick === maxTick) {\n      const offset = Math.pow(10, decimals.valueOf())\n      return [minTick - offset, minTick, maxTick + offset]\n    }\n\n    if (minTick + Math.pow(10, decimals.valueOf()).toFixed(decimals.valueOf()) === maxTick.toString()) {\n      const offset = Math.pow(10, decimals.valueOf())\n      return [minTick - offset, minTick, maxTick]\n    }\n\n    if (minTick < 0 && maxTick > 0) {\n      diff = Math.abs(minTick) + maxTick\n    } else {\n      diff = Math.abs(Math.abs(minTick) - Math.abs(maxTick))\n    }\n    const middleTick = Number((minTick + diff / 2).toFixed(decimals.valueOf()))\n    return [minTick, middleTick, maxTick]\n  }\n\n  return withMiddleTick(minTick(), maxTick())\n}\n\nconst getMinMax = (\n  data: { id: string; name: string; value: number }[]\n): { min: number, max: number } => {\n  const values = data.map(d => d.value)\n  const min = Math.min(...values)\n  const max = Math.max(...values)\n  if (values.length === 0) return {min: 0, max: 0}\n  return {min: min, max: max}\n}\n\n","import * as React from 'react'\nimport { isEqual, round } from 'lodash'\nimport { connect } from 'react-redux'\nimport { Bar, BarChart, CartesianGrid, Cell, Label, Tooltip, XAxis, YAxis } from 'recharts'\nimport { Rootstate } from '../../state'\nimport { getSortedGlobalRanking } from '../../state/observation/selectors'\nimport { Rank } from '../../state/observation/types'\nimport { Indicator } from '../../state/indicator/types'\nimport { allDistrictsById } from '../../state/district/selectors'\nimport { getSelectedIndicators } from '../../state/indicator/selectors'\nimport { District } from '../../state/district/types'\nimport DistrictLabel from './DistrictLabel'\nimport AnimatePosition from './AnimatePosition'\nimport { getRankPosition, convertDecimalPoint } from '../../helpers'\nimport DistrictRankingTooltip from './DistricRankingTooltip'\nimport './districtRanking.css'\nimport { asDomain, getTicks } from './util';\n\nexport interface PublicProps {\n  className?: string\n}\n\ninterface InjectedProps {\n  ranks: Rank[]\n  districts: { [key: string]: District }\n  indicators: Indicator[]\n}\n\nexport type Positions = {\n  [id: string]: number\n}\n\ninterface StateProps {\n  positions: Positions\n}\n\n\nclass DistrictRanking extends React.Component<PublicProps & InjectedProps, StateProps> {\n  constructor(props: any) {\n    super(props)\n    this.state = {positions: {}}\n  }\n\n  render() {\n    const {districts, ranks, indicators} = this.props\n    let rankNum = 0\n    const data = ranks.map((rank, i) => {\n      if (rank.districtId !== '99') {\n        rankNum = rankNum + 1\n        return {\n          name: `${rankNum < 10 ? ' ' : ''}${rankNum}. ${districts[rank.districtId].name}`,\n          value: round(rank.value, 2),\n          id: rank.districtId,\n        }\n      }\n      // Basel-Stadt without rank (number), see handling in DistrictLabel\n      return {\n        name: `X ${districts[rank.districtId].name}`,\n        value: round(rank.value, 2),\n        id: rank.districtId,\n      }\n    })\n\n    const positions = getRankPosition(data)\n    const positionsBefore = this.state.positions\n    const ticks = getTicks(data)\n    const domain = asDomain(ticks)\n    return (\n      <div className=\"left-grid district-ranking\">\n        <div className=\"container\" >\n          {/* District ranking bar plot */}\n          <AnimatePosition\n            from={positionsBefore ? positionsBefore : positions}\n            to={positions}\n            onRest={() =>\n              !isEqual(positionsBefore, positions) ? this.setState({positions: positions}) : {}\n            }\n          >\n            {props => {\n              return (\n                <BarChart data={data} width={285} height={530} layout=\"vertical\">\n                  <CartesianGrid/>\n                  {/* TODO: Check color of bar*/}\n                  <XAxis\n                    axisLine={false}\n                    domain={domain}\n                    interval=\"preserveStart\"\n                    type=\"number\"\n                    tickLine={false}\n                    ticks={ticks}\n                    tickFormatter={tick =>\n                      tick > 0 ? convertDecimalPoint(tick.toString().substr(0, 4)) : convertDecimalPoint(tick.toString().substr(0, 5))\n                    }\n                  />\n                  <Tooltip offsetX={-195} offsetY={-37} content={<DistrictRankingTooltip/>} />\n                  <YAxis\n                    width={135}\n                    dataKey=\"name\"\n                    type=\"category\"\n                    orientation=\"right\"\n                    axisLine={false}\n                    tick={false}\n                    tickLine={false}\n                  >\n                    {data.map(entry => {\n                      return (\n                        <Label\n                          content={DistrictLabel}\n                          key={entry.id}\n                          x={150}\n                          y={props[entry.id]}\n                          value={entry.name}\n                        />\n                      )\n                    })}\n                  </YAxis>\n                  <Bar dataKey=\"value\">\n                    {data.map((entry, index) =>\n                      entry.id === '99' ? (\n                        <Cell key={`cell-${index}`} fill={'black'} y={props[entry.id]}/>\n                      ) : (\n                        <Cell key={`cell-${index}`} fill={'#FFD300'} y={props[entry.id]}/>\n                      )\n                    )}\n                  </Bar>\n                </BarChart>\n              )\n            }}\n          </AnimatePosition>\n          <div className=\"districtRankingExplanation\">\n            Berechnungsergebnis aus:\n            <ul>\n              {indicators.map(indicator => {\n                return (\n                  <React.Fragment key={indicator.id}>\n                    <li>\n                      {indicator.name} mit Gewicht {convertDecimalPoint(indicator.weight * indicator.valuation)}\n                    </li>\n                  </React.Fragment>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  ranks: getSortedGlobalRanking(state),\n  districts: allDistrictsById(state),\n  indicators: getSelectedIndicators(state),\n})\n\nexport default connect(mapStateToProps)(DistrictRanking)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Rootstate } from '../../state'\nimport { getSelectedIndicators } from '../../state/indicator/selectors'\nimport { Indicator } from '../../state/indicator/types'\nimport NavButton from '../customElements/NavButton'\nimport './navigation.css'\nimport { compose } from 'recompose'\n\nexport interface Props {\n  selectedIndicators: Indicator[]\n}\n\nconst AppNaviation: React.SFC<Props> = ({ selectedIndicators }) => {\n  const disabled = selectedIndicators.length <= 0\n\n  return (\n    <div className=\"right-grid navigation\">\n      <NavButton className=\"nav-button\" variant=\"contained\" to={'/'}>\n        Auswahl ändern\n      </NavButton>\n\n      <NavButton className=\"nav-button\" disabled={disabled} variant=\"contained\" to={'ranking'}>\n        Bewertung ändern\n      </NavButton>\n\n      <NavButton className=\"nav-button\" disabled={disabled} variant=\"contained\" to={'/importance'}>\n        Gewichtung ändern\n      </NavButton>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  selectedIndicators: getSelectedIndicators(state),\n})\n\nexport default compose<Props, {}>(\n  connect(\n    mapStateToProps,\n    undefined\n  )\n)(AppNaviation)\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { Rootstate } from '../../../state'\nimport { connect } from 'react-redux'\nimport { Grid, Icon } from '@material-ui/core'\nimport { Indicator, NegativePositive, WeightNumber } from '../../../state/indicator/types'\nimport { getChoosableIndicators } from '../../../state/indicator/selectors'\nimport './legend.css'\n\nimport {\n  deselectIndicator,\n  replaceIndicatorWith,\n  selectIndicator,\n  setNegativeValuation,\n  setPositiveValuation,\n  setWeight,\n} from '../../../state/indicator/actions'\n\nimport 'rc-slider/assets/index.css'\nimport Slider from 'rc-slider'\nimport { getClassNameNegPosBorder, getClassNameSelectedUnselected, getColor, getLabelBy, } from '../../../helpers'\n\ninterface Props {\n  choosableIndicators: Indicator[]\n\n  positiveValuation(id: string): void\n\n  negativeValuation(id: string): void\n\n  setIndicatorWeight(id: string, weight: WeightNumber): void\n\n  deselect(id: string): void\n\n  selectEmptyIndicator(id: string): void\n\n  // curried function\n  replaceIndicator(selectId: string, replaceId: string): void\n}\n\nexport interface PublicProps {\n  indicator?: Indicator\n}\n\nconst LegendItem: React.SFC<Props & PublicProps> = ({\n                                                      indicator,\n                                                      negativeValuation,\n                                                      positiveValuation,\n                                                      setIndicatorWeight,\n                                                      deselect,\n                                                      choosableIndicators,\n                                                      replaceIndicator,\n                                                      selectEmptyIndicator,\n                                                    }) => {\n  // normal rendering\n  if (indicator) {\n    const sliderStyle = getColor(indicator.valuation === NegativePositive.Positive)\n\n    return (\n      <div key={indicator.id} className={'legend-container' + getClassNameNegPosBorder(indicator)}>\n        <Grid container>\n          <Grid item xs={2}>\n            <div className=\"clear-icon-container\" onClick={() => deselect(indicator.id)}>\n              <Icon className={'clear-icon'}>\n                clear{' '}\n              </Icon>\n            </div>\n          </Grid>\n          <Grid item xs={10} style={{minHeight: 35}}>\n            <div\n              className={'legend-select'}\n            >\n              <select style={{height: '100%', width: '100%' , border: 'none'}}\n                onChange={event => replaceIndicator(event.target.value, indicator.id)}\n                value={indicator.id}\n              >\n                <option value={indicator.id}>{indicator.name}</option>\n                {choosableIndicators.map(indic => (\n                  <option key={indic.id} value={indic.id}>\n                    {indic.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </Grid>\n\n          <Grid item xs={2}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className=\"rate-positive\" onClick={() => positiveValuation(indicator.id)}>\n                  <Icon\n                    className={\n                      'rating-icon ' + getClassNameSelectedUnselected(indicator, 'positive')\n                    }\n                  >\n                    mood\n                  </Icon>\n                </div>\n              </Grid>\n              <Grid item xs={12}>\n                <div className=\"rate-negativ\" onClick={() => negativeValuation(indicator.id)}>\n                  <Icon\n                    className={\n                      'rating-icon' + getClassNameSelectedUnselected(indicator, 'negative')\n                    }\n                  >\n                    mood_bad\n                  </Icon>\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item className=\"weight\" xs={10}>\n            <Grid container direction={'column'} justify={'space-around'}>\n              <Grid item xs={12} style={{minHeight: 30}}>\n                <div className=\"weight-label\">{getLabelBy(indicator.weight)}</div>\n              </Grid>\n              <Grid item xs={12}>\n\n                <Slider\n                  min={0.25}\n                  max={1.0}\n                  step={0.25}\n                  value={indicator.weight}\n                  marks={{\n                    0.25: '',\n                    0.5: '',\n                    0.75: '',\n                    1: '',\n                  }}\n                  activeDotStyle={sliderStyle}\n                  trackStyle={sliderStyle}\n                  handleStyle={sliderStyle}\n                  style={{\n                    paddingRight: '5px',\n                    marginTop: '5px',\n                  }}\n                  onChange={value => setIndicatorWeight(indicator.id, value)}\n                />\n\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n\n  // empty selector\n  // const sliderStyle = { borderColor: '#aaa', backgroundColor: '#ccc' }\n  return (\n    <div key={'emptyLegend'} className={'legend-container neutral-border'}>\n      <Grid container>\n        <Grid item xs={12}>\n          <select\n            className=\"legend-select-empty\"\n            onChange={event =>\n              event.target.value !== 'empty' ? selectEmptyIndicator(event.target.value) : null\n            }\n            value=\"empty\"\n          >\n            <option value=\"empty\">Indikator auswählen</option>\n            {choosableIndicators.map(indic => (\n              <option key={indic.id} value={indic.id}>\n                {indic.name}\n              </option>\n            ))}\n          </select>\n\n          {/* <div className={'legend-name'}> </div> */}\n        </Grid>\n        <Grid item xs={2}>\n          <Grid container>\n            <Grid item xs={12}>\n              <div className=\"rate-positive\">\n                <Icon className={'rating-icon positive-unselected-disabled'}>mood</Icon>\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <div className=\"rate-negativ\">\n                <Icon className={'rating-icon negative-unselected-disabled'}>mood_bad</Icon>\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item className=\"weight\" xs={10}>\n          <Grid container direction={'column'} justify={'space-around'}>\n            <Grid item xs={12}>\n              <Slider\n                min={0.25}\n                max={1.0}\n                step={0.25}\n                value={0}\n                marks={{\n                  0.25: '',\n                  0.5: '',\n                  0.75: '',\n                  1: '',\n                }}\n                disabled={true}\n                style={{\n                  paddingRight: '5px',\n                  marginTop: '5px',\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <div className=\"weight-label\">{}</div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate, props: PublicProps) => ({\n  ...props,\n  choosableIndicators: getChoosableIndicators(state),\n})\n\nconst mapDispatchToProps: Partial<Props> = {\n  positiveValuation: setPositiveValuation,\n  negativeValuation: setNegativeValuation,\n  setIndicatorWeight: setWeight,\n  deselect: deselectIndicator,\n  replaceIndicator: _.curry(replaceIndicatorWith),\n  selectEmptyIndicator: selectIndicator,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LegendItem)\n","import * as React from 'react'\nimport { Rootstate } from '../../../state'\nimport { connect } from 'react-redux'\nimport { Indicator } from '../../../state/indicator/types'\nimport LegendItem from './LegendItem'\nimport { getChoosableIndicators } from '../../../state/indicator/selectors'\nimport { compose } from 'recompose'\n\nexport interface EnhancedProps {\n  choosableIndicators: Indicator[]\n  selectedIndicators: Indicator[]\n}\n\nexport interface StateFromProps {\n  selectedIndicators: Indicator[]\n}\n\nconst Legend = ({ choosableIndicators, selectedIndicators }: EnhancedProps) => {\n  return (\n    <div className=\"parallel-line-plot-legend\">\n      {selectedIndicators.map(i => {\n        return <LegendItem key={i.id} indicator={i} />\n      })}\n      {/* empty LegendItem to add additional indicator */}\n      {choosableIndicators.length !== 0 ? <LegendItem key=\"emptyIndicator\" /> : null}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate, props: StateFromProps) => ({\n  selectedIndicators: props.selectedIndicators,\n  choosableIndicators: getChoosableIndicators(state),\n})\n\nexport default compose<EnhancedProps, StateFromProps>(\n  connect(\n    mapStateToProps,\n    undefined\n  )\n)(Legend)\n","export const DISTRICT_UPDATE = 'district/UPDATE';\nexport type DISTRICT_UPDATE = typeof DISTRICT_UPDATE;\n\nexport const DISTRICT_HIGHLIGHT = 'district/TOGGLE_SELECTION';\nexport type DISTRICT_HIGHLIGHT = typeof DISTRICT_HIGHLIGHT;\n\nexport const DISTRICT_HIDE = 'district/HIDE';\nexport type DISTRICT_HIDE = typeof DISTRICT_HIDE;\n\nexport const DISTRICT_ON_HOVER = 'district/ON_HOVER';\nexport type DISTRICT_ON_HOVER = typeof DISTRICT_ON_HOVER;\n\nexport const DISTRICT_OFF_HOVER = 'district/OFF_HOVER';\nexport type DISTRICT_OFF_HOVER = typeof DISTRICT_OFF_HOVER;","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { TooltipProps } from 'recharts'\nimport { Indicator, NegativePositive } from '../../state/indicator/types'\nimport { District } from '../../state/district/types'\nimport { Observation } from '../../state/observation/types'\nimport { Rootstate } from '../../state'\nimport { allDistricts } from '../../state/district/selectors'\nimport { getAllObservations } from '../../state/observation/selectors'\nimport { getColor } from '../../helpers'\nimport './indicatorTooltip.css'\n\nconst getObservationText = (indicator: Indicator, observation: Observation): any => {\n  let value = observation.value_txt\n  return <p style={getParagraphStyle(indicator, false)}>{value}, Rang {observation.ranking}</p>\n}\nconst getParagraphStyle = (indicator: Indicator, top: boolean): React.CSSProperties => {\n  const style = {\n    margin: 0,\n    paddingLeft: 20\n  }\n  /*\n  This is a special hack have 'Anteil Einfamilienhäuser 2017' with a paddingTop of 15 \n  but 'Erwerbstätigenqutoe 2012-2016' with a padding of 9 because both have the length \n  of 28, but the browser will write 'Erwerbstätigenqutoe 2012-2016' in two lines\n  and 'Anteil Einfamilienhäuser 2017' in one.\n  */\n  let size = (indicator.name + indicator.yearText).length;\n  if (indicator.yearText.indexOf('-') > 0) {\n    size += 1;\n  }\n  if (size <= 28 && top) {\n    style['paddingTop'] = 15\n    return style\n  }\n  if (top) {\n    style['paddingTop'] = 9\n  }\n  return style\n}\n\nconst getIndicatorYear = (indicator: Indicator): string => {\n  if (indicator.yearText.includes('-')) {\n    let yearText = indicator.yearText;\n    return yearText.replace('-', '\\u2011')\n  }\n  return indicator.yearText\n}\n\nexport interface PublicProps extends TooltipProps {\n  indicator: Indicator,\n  districts: District[],\n  observations: Observation[],\n}\n\nclass IndicatorTooltip extends React.Component<PublicProps> {\n\n  constructor(props: PublicProps) {\n    super(props)\n  }\n\n  getDistrictByName(name: string): District {\n    return this.props.districts.filter(district => district.name === name)[0]\n  }\n\n  getObservation(indicatorId: string, districtId: string): Observation {\n    return this.props.observations.filter(observation => observation.districtId === districtId\n      && observation.indicatorId === indicatorId)[0]\n  }\n\n  getRectStyle(indicator: Indicator): any {\n    const color = getColor(indicator.valuation === NegativePositive.Positive)\n    return {\n      fill: 'white',\n      stroke: color.borderColor,\n      strokeWidth: 1\n    }\n  }\n\n  render() {\n    const {active} = this.props;\n    if (active) {\n      const {payload, indicator} = this.props;\n      const district = this.getDistrictByName(payload[0].payload.name)\n      const observation = this.getObservation(indicator.id, district.id);\n      const style = this.getRectStyle(indicator)\n      return (\n        <div className=\"indicatorTooltip\">\n          <svg width={190} height={74} viewBox=\"-10 -4 200 80\" style={{position: 'absolute', zIndex: -1}}>\n            <rect x=\"0\" y=\"0\" rx=\"5\" ry=\"5\" width=\"190\" height=\"74\" style={style}/>\n            <rect x=\"-4\" y=\"27\" width=\"10\" height=\"10\" transform=\"rotate(45 -4 32)\" style={style}/>\n            <rect x=\"-2\" y=\"26\" width=\"11\" height=\"11\" transform=\"rotate(45 -2 31)\"\n                  style={{fill: 'white', stroke: 'white', strokeWidth: 1}}/>\n          </svg>\n          <p style={getParagraphStyle(indicator, true)}> {indicator.name} {getIndicatorYear(indicator)} </p>\n          <p style={getParagraphStyle(indicator, false)}> {district.name} </p>\n          {getObservationText(indicator, observation)}\n        </div>\n      );\n    }\n    return null;\n  }\n};\n\nconst mapStateToProps = (state: Rootstate) => ({\n  districts: allDistricts(state),\n  observations: getAllObservations(state)\n})\n\n\nexport default connect(mapStateToProps)(IndicatorTooltip);\n\n  ","import * as React from 'react'\nimport { compose } from 'recompose'\nimport { connect } from 'react-redux'\nimport { Bar, BarChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts'\nimport { round } from 'lodash'\nimport { Rank } from '../../state/observation/types'\nimport { Rootstate } from '../../state'\nimport { makeGetIndicatorRanking } from '../../state/observation/selectors'\nimport { District } from '../../state/district/types'\nimport { Indicator, NegativePositive } from '../../state/indicator/types'\nimport { allDistrictsById } from '../../state/district/selectors'\nimport { getColor, convertDecimalPoint } from '../../helpers'\nimport IndicatorTooltip from './IndicatorTooltip'\n\nexport interface IndicatorPlotPublicProps {\n  // indicator id\n  indicator: Indicator\n}\n\n\ninterface IndicatorProps {\n  indicator: Indicator\n  districts: {\n    [key\n      :\n      string\n      ]:\n      District\n  }\n  ranks: Rank[]\n}\n\nconst IndicatorPlot: React.SFC<IndicatorProps> = ({districts, indicator, ranks}) => {\n  const data = ranks.map(rank => {\n    return {\n      name: districts[rank.districtId].name,\n      value: round(rank.value, 2),\n    }\n  })\n\n  const color = getColor(indicator.valuation === NegativePositive.Positive)\n\n  const ticks = [0, 0.25, 0.5, 0.75, 1]\n\n  return (\n    <div className=\"bar-plot\" key={indicator.id}>\n      <BarChart data={data} layout=\"vertical\" width={190} height={530}>\n        <CartesianGrid/>\n        // TODO: Check color of bar\n        <XAxis\n          axisLine={false}\n          domain={[0, 1]}\n          type=\"number\"\n          tickLine={false}\n          ticks={ticks}\n          tickFormatter={tick => convertDecimalPoint(ticks.indexOf(tick) % 2 === 0 ? tick : '')}\n        />\n        <Tooltip offsetX={-190} offsetY={-37}\n                 content={<IndicatorTooltip indicator={indicator}/>}/>\n        {\n          <YAxis\n            dataKey=\"name\"\n            type=\"category\"\n            orientation=\"right\"\n            axisLine={false}\n            hide={true}\n            tickLine={false}\n          />\n        }\n        <Bar dataKey=\"value\" fill={color.backgroundColor}/>\n      </BarChart>\n    </div>\n  )\n}\n\n// Each IndicatorPlot receives their own selector, only updates when something relevant changes\nconst makeMapStateToProps = () => {\n  const getIndicatorRanking = makeGetIndicatorRanking()\n  const mapStateToProps = (state: Rootstate, props: IndicatorPlotPublicProps): IndicatorProps => ({\n    ranks: getIndicatorRanking(state, {id: props.indicator.id}),\n    districts: allDistrictsById(state),\n    ...props,\n  })\n  return mapStateToProps\n}\n\nexport default compose<IndicatorProps, IndicatorPlotPublicProps>(\n  connect(\n    makeMapStateToProps,\n    undefined\n  )\n)(IndicatorPlot)\n","import * as React from 'react'\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nexport interface EmptyIndicatorPlotProps {}\n\nconst EmptyIndicatorPlot: React.SFC<EmptyIndicatorPlotProps> = ({}) => {\n  const data: any = [] // }, { value: , name: 'test' }]\n\n  const ticks = [0, 0.25, 0.5, 0.75, 1]\n  return (\n    <div className=\"bar-plot bar-plot-empty\">\n      <BarChart data={data} layout=\"vertical\" width={190} height={530}>\n        <CartesianGrid />\n\n        <XAxis\n          axisLine={false}\n          domain={[0, 1]}\n          type=\"number\"\n          tickLine={false}\n          ticks={ticks}\n          tickFormatter={tick => (ticks.indexOf(tick) % 2 === 0 ? tick : '')}\n        />\n        {\n          <YAxis\n            dataKey=\"name\"\n            type=\"category\"\n            orientation=\"right\"\n            axisLine={false}\n            hide={true}\n            tickLine={false}\n          />\n        }\n        <Bar dataKey=\"value\" />\n      </BarChart>\n    </div>\n  )\n}\n\nexport default EmptyIndicatorPlot\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { Rootstate } from '../../state'\nimport { CartesianGrid, Line, LineChart, ResponsiveContainer } from 'recharts'\nimport { LineRank, Rank } from '../../state/observation/types'\nimport { District } from '../../state/district/types'\nimport { allDistricts } from '../../state/district/selectors'\nimport { getLineRanking } from '../../state/observation/selectors'\nimport { getSelectedIndicators, getChoosableIndicators } from '../../state/indicator/selectors'\nimport { Indicator } from '../../state/indicator/types'\nimport { getRankingColor } from '../../helpers'\nimport {\n  _highlightDistrict,\n  _hideDistrict,\n  _onHover,\n  _offHover,\n} from '../../state/district/actions'\nimport CustomDot from './plotElements/CustomDot'\nimport { compose } from 'recompose'\nimport IndicatorPlot from '../barplot/IndicatorPlot'\nimport EmptyIndicatorPlot from '../barplot/EmptyIndicatorPlot'\n\nexport interface PublicProps {}\n\nexport interface Props {\n  districts: District[]\n  rankingData: Rank[]\n  lineRanking: LineRank[]\n  selectedIndicators: Indicator[]\n  choosableIndicators: Indicator[]\n\n  highlightDistrict(id: string): void\n  hideDistrict(id: string): void\n  onHover(id: string): void\n  offHover(id: string): void\n}\n\nconst getColor = (lineRank: LineRank[], district: District): string => {\n  const r = _.find(lineRank, rank => rank.objectId === district.id)\n  if ((district.viewOptions.highlight || district.viewOptions.hover) && r) {\n    return getRankingColor(r)\n  } else {\n    return '#A0A0A0'\n  }\n}\n\nconst getLineStroke = (district: District): number => {\n  if (district.viewOptions.highlight || district.viewOptions.hover) {\n    return 2\n  }\n  return 1\n}\n\nconst getWidth = (indicators: Indicator[]): number => {\n  const elementWidth = 190\n  const elementMargin = 5\n  return (elementWidth + 2 * elementMargin) * (indicators.length - 1)\n}\n\nconst parallelLinePlot = (props: Props) => {\n  const {\n    districts,\n    rankingData,\n    lineRanking,\n    selectedIndicators,\n    highlightDistrict,\n    hideDistrict,\n    onHover,\n    offHover,\n  } = props\n\n  return (\n    <ResponsiveContainer\n      className=\"parallel-line-plot-chart\"\n      width={getWidth(selectedIndicators)}\n      height={600}\n    >\n      <LineChart data={rankingData} height={600}>\n        <CartesianGrid stroke=\"#d9d9d9\" strokeDasharray=\"2\" />\n        {districts.map(d => (\n          <Line\n            /*dots disappearing https://github.com/recharts/recharts/issues/804*/\n            isAnimationActive={false}\n            key={d.id}\n            type=\"monotone\"\n            dataKey={d.name}\n            stroke={getColor(lineRanking, d)}\n            strokeWidth={getLineStroke(d)}\n            onClick={() => (d.viewOptions.highlight ? hideDistrict(d.id) : highlightDistrict(d.id))}\n            onMouseEnter={() => onHover(d.id)}\n            onMouseLeave={() => offHover(d.id)}\n            dot={\n              <CustomDot\n                onHover={() => onHover(d.id)}\n                offHover={() => offHover(d.id)}\n                onClick={() =>\n                  d.viewOptions.highlight ? hideDistrict(d.id) : highlightDistrict(d.id)\n                }\n              />\n            }\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}\n\nconst barPlot: React.SFC<Props> = props => {\n  /*\n  console.log(props.rankingData)\n  const data = [\n    { name: 'Page A', uv: 4000, pv: 2400, amt: 2400 },\n    { name: 'Page B', uv: 3000, pv: 1398, amt: 2210 },\n    { name: 'Page C', uv: 2000, pv: 9800, amt: 2290 },\n    { name: 'Page D', uv: 2780, pv: 3908, amt: 2000 },\n    { name: 'Page E', uv: 1890, pv: 4800, amt: 2181 },\n    { name: 'Page F', uv: 2390, pv: 3800, amt: 2500 },\n    { name: 'Page G', uv: 3490, pv: 4300, amt: 2100 },\n  ]*/\n\n  return (\n    <div className=\"bar-plot-container\">\n      {props.selectedIndicators.map(indicator => (\n        <IndicatorPlot key={indicator.id} indicator={indicator} />\n      ))}\n      {props.choosableIndicators.length !== 0 ? <EmptyIndicatorPlot /> : null}\n    </div>\n  )\n}\n\nconst ChartContainer = (props: Props) => {\n  /*  if (!anyUserSelection) {\n      lineRanking.slice(0, 3).forEach(r => _highlightDistrict(r.objectId, false))\n    }*/\n  if (false) {\n    return parallelLinePlot(props)\n  } else {\n    return barPlot(props)\n  }\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  districts: allDistricts(state),\n  selectedIndicators: getSelectedIndicators(state),\n  choosableIndicators: getChoosableIndicators(state),\n  // rankingData: getSortedGlobalRanking(state), // getRankingDataForChart(state),\n  lineRanking: getLineRanking(state),\n})\n\nconst mapDispatchToProps = {\n  highlightDistrict: _highlightDistrict,\n  hideDistrict: _hideDistrict,\n  onHover: _onHover,\n  offHover: _offHover,\n}\n\nexport default compose<Props, PublicProps>(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(ChartContainer)\n","import * as constants from './constants'\n\n/**\n * Interface with payload\n */\nexport interface DoSomehtingWithDistrict {\n  type: constants.DISTRICT_UPDATE\n}\n\nexport interface HighlightDistrict {\n  type: constants.DISTRICT_HIGHLIGHT\n  payload: {\n    id: string\n    highlight: boolean\n  }\n}\n\nexport interface HideDistrict {\n  type: constants.DISTRICT_HIDE\n  payload: {\n    id: string\n    highlight: boolean\n  }\n}\n\nexport interface OnHover {\n  type: constants.DISTRICT_ON_HOVER\n  payload: {\n    id: string\n    hover: boolean\n  }\n}\n\nexport interface OffHover {\n  type: constants.DISTRICT_OFF_HOVER\n  payload: {\n    id: string\n    hover: boolean\n  }\n}\n\nexport type DistrictAction =\n  | DoSomehtingWithDistrict\n  | HighlightDistrict\n  | HideDistrict\n  | OnHover\n  | OffHover\n// type with all interfaces, more with ||\n\n/**\n * Actions with type and payload\n */\n\nexport const _highlightDistrict = (id: string): HighlightDistrict => ({\n  type: constants.DISTRICT_HIGHLIGHT,\n  payload: {\n    id: id,\n    highlight: true,\n  },\n})\n\nexport const _hideDistrict = (id: string): HideDistrict => ({\n  type: constants.DISTRICT_HIDE,\n  payload: {\n    id: id,\n    highlight: false,\n  },\n})\n\nexport const _onHover = (id: string): OnHover => ({\n  type: constants.DISTRICT_ON_HOVER,\n  payload: {\n    id: id,\n    hover: true,\n  },\n})\n\nexport const _offHover = (id: string): OffHover => ({\n  type: constants.DISTRICT_OFF_HOVER,\n  payload: {\n    id: id,\n    hover: false,\n  },\n})\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Rootstate } from '../../state'\nimport { getSelectedIndicators, getChoosableIndicators } from '../../state/indicator/selectors'\nimport Legend from './legend/Legend'\nimport { Indicator } from '../../state/indicator/types'\nimport { toggleIndicatorSelectionVisibility } from '../../state/util/actions'\nimport { Redirect } from 'react-router'\nimport './paralell-line-plot.css'\nimport ChartContainer from './ChartContainer'\n\nexport interface Props {\n  choosableIndicators: Indicator[]\n  selectedIndicators: Indicator[]\n\n  toggleVisibility(visibility: boolean): void\n}\n\nconst IndicatorRanking: React.SFC<Props> = props => {\n  const { choosableIndicators, selectedIndicators } = props\n  const additionalColumns = choosableIndicators.length !== 0 ? 1 : 0\n\n  if (selectedIndicators.length === 0) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <div id=\"scroll-area\" className=\"right-grid parallel-line-plot-scroll-area\">\n      <div\n        className=\"parallel-line-plot-container\"\n        style={{ width: (190 + 8) * (selectedIndicators.length + additionalColumns) }}\n      >\n        <Legend selectedIndicators={selectedIndicators} />\n        <ChartContainer />\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate) => ({\n  selectedIndicators: getSelectedIndicators(state),\n  choosableIndicators: getChoosableIndicators(state),\n})\n\nconst mapDispatchToProps = {\n  toggleVisibility: toggleIndicatorSelectionVisibility,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(IndicatorRanking)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Rootstate } from '../state/index'\nimport DistrictRanking from '../component/barplot/DistrictRanking'\nimport AppNavigation from '../component/navigation/MainNavigation'\nimport IndicatorRanking from '../component/parallelLinePlot/IndicatorRanking'\nimport { compose } from 'recompose'\nimport Disclaimer from '../component/disclaimer/Disclaimer';\n// import { Observation } from '../../state/observation/types'\n\nexport interface Props {}\n\nconst MainView: React.StatelessComponent<Props> = ({}) => {\n  return (\n    <div className=\"App main-view\">\n      <div className=\"left-grid information\">\n      Weitere Anpassungen können entweder direkt an den Knöpfen und Reglern oberhalb der Grafiken\n      oder über den entsprechenden Arbeitsschritt vorgenommen werden.\n      </div>\n      <div className=\"left-grid title\">\n        <h2 className=\"district-ranking-title\">Rangliste</h2>\n      </div>\n      <AppNavigation />\n      <div className=\"right-grid indicator-ranking\">\n        <IndicatorRanking />\n      </div>\n      <DistrictRanking />\n      <Disclaimer/>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: Rootstate): Props => ({})\n\nexport default compose<Props, {}>(connect(mapStateToProps))(MainView)\n","import * as React from 'react'\nimport { Route } from 'react-router-dom'\nimport './App.css'\nimport IndicatorSelection from './page/IndicatorSelection'\nimport IndicatorRating from './page/IndicatorRating'\nimport IndicatorImportance from './page/IndicatorWeight'\nimport MainView from './page/MainView'\n// import './app.debug.css'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Route exact path=\"/\" component={IndicatorSelection} />\n        <Route exact path=\"/ranking\" component={IndicatorRating} />\n        <Route exact path=\"/importance\" component={IndicatorImportance} />\n        <Route exact path=\"/plot\" component={MainView} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import * as _ from 'lodash'\nimport { IndicatorAction } from './actions'\nimport { IndicatorState } from './types'\nimport {\n  INDICATOR_SELECT,\n  INDICATOR_UPDATE,\n  INDICATOR_VALUATION,\n  INDICATOR_WEIGHT,\n  INDICATOR_GROUP_SELECTION,\n  REPLACE_SELECTED_INDICATOR,\n} from './constants'\nimport { Indicator } from './types'\n\nconst indicatorData = require('./../data/indicator.json')\nconst arrayToObjectById = (array: Indicator[]) =>\n  array.reduce((obj, item) => {\n    obj[item.id] = item\n    return obj\n  }, {})\n\n/*\n * A reducer needs to be pure and side effect free\n * -> one solution is to implement a deep copy with the spread operator\n * */\n\nfunction addIdToOrderedListById(orderedBySelection: string[], newId: string, oldId?: string) {\n  // new id already in list\n  if (orderedBySelection.indexOf(newId) > 0) {\n    return [...orderedBySelection]\n  }\n\n  // no replace -> add at the end of the list\n  if (!oldId) {\n    return [...orderedBySelection, newId]\n  }\n\n  // check if oldId is really in our list\n  if (orderedBySelection.indexOf(oldId) < 0) {\n    return [...orderedBySelection, newId]\n  }\n  return orderedBySelection.map(id => (id === oldId ? newId : id))\n}\n\n/**\n * Removes a specific id from the list of ordered indicator ids.\n *\n * @param orderedBySelection list of ordered indicator ids\n * @param idToRemove the id we want to remove from the list\n */\nfunction removeIdFromOrderedListById(orderedBySelection: string[], idToRemove: string) {\n  return _.filter(orderedBySelection, id => id !== idToRemove)\n}\n\nfunction updateOrderedListById(\n  orderedBySelection: string[],\n  select: boolean,\n  newId: string,\n  oldId?: string\n) {\n  if (select) {\n    return addIdToOrderedListById(orderedBySelection, newId, oldId)\n  }\n  return removeIdFromOrderedListById(orderedBySelection, newId)\n}\n\nfunction updetOrderedListBySelectedGroup(\n  orderedBySelection: string[],\n  select: boolean,\n  indicators: Indicator[]\n) {\n  if (select) {\n    let onlyNewEntries = indicators.filter(\n      i => _.findIndex(orderedBySelection, e => i.id === e) === -1\n    )\n    let ids = _.map(onlyNewEntries, 'id')\n    return [...orderedBySelection, ...ids]\n  }\n  return orderedBySelection.filter(id => _.findIndex(indicators, i => id === i.id) === -1)\n}\n\nexport function indicator(\n  state: IndicatorState = { byId: arrayToObjectById(indicatorData), orderedBySelection: [] },\n  action: IndicatorAction\n): IndicatorState {\n  switch (action.type) {\n    /*\n     * Updates all information based on the user selection, see storeState for shape\n     */\n    case INDICATOR_UPDATE: {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            ...action.payload,\n          },\n        },\n        orderedBySelection: updateOrderedListById(\n          state.orderedBySelection,\n          action.payload.selected,\n          action.payload.id\n        ),\n      }\n    }\n    /*\n     * Sets the selection with the\n     */\n    case INDICATOR_SELECT: {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            ...action.payload,\n          },\n        },\n        orderedBySelection: updateOrderedListById(\n          state.orderedBySelection,\n          action.payload.selected,\n          action.payload.id\n        ),\n      }\n    }\n    /*\n     * Valuation\n     */\n    case INDICATOR_VALUATION: {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            ...action.payload,\n          },\n        },\n      }\n    }\n\n    /*\n     * Weight\n     */\n    case INDICATOR_WEIGHT: {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            ...action.payload,\n          },\n        },\n      }\n    }\n\n    /* Select all of group */\n    case INDICATOR_GROUP_SELECTION: {\n      let toGroupIndicator = _.filter(\n        state.byId,\n        indicat => indicat.subject === action.payload.subject\n      )\n      let toggledIndicators = _.reduce(\n        toGroupIndicator,\n        (result, indicat) => {\n          return {\n            ...result,\n            [indicat.id]: {\n              ...indicat,\n              selected: action.payload.selected,\n            },\n          }\n        },\n        {}\n      )\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...toggledIndicators,\n        },\n        orderedBySelection: updetOrderedListBySelectedGroup(\n          state.orderedBySelection,\n          action.payload.selected,\n          toGroupIndicator\n        ),\n      }\n    }\n\n    /* Replace indicator selection with another */\n    case REPLACE_SELECTED_INDICATOR: {\n      const idx = _.indexOf(state.orderedBySelection, action.payload.replaceId)\n      const position = idx > -1 ? idx : state.orderedBySelection.length\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          // deselect replaceId\n          [action.payload.replaceId]: {\n            ...state.byId[action.payload.replaceId],\n            selected: false,\n          },\n          // select\n          [action.payload.selectId]: {\n            ...state.byId[action.payload.selectId],\n            selected: true,\n          },\n        },\n        orderedBySelection: [\n          // Replace Id or put at the end\n          ..._.slice(state.orderedBySelection, 0, position),\n          action.payload.selectId,\n          ..._.slice(state.orderedBySelection, position + 1, state.orderedBySelection.length),\n        ],\n      }\n    }\n  }\n  return state\n}\n","import { DistrictAction } from './actions';\nimport { District, DistrictState } from './types';\nimport {\n  DISTRICT_HIDE,\n  DISTRICT_HIGHLIGHT,\n  DISTRICT_OFF_HOVER,\n  DISTRICT_ON_HOVER\n} from './constants';\n\nconst districtData = require('./../data/district.json');\nconst arrayToObjectById = (array: District[]) =>\n    array.reduce((obj, item) => {\n      obj[item.id] = item\n      return obj\n    }, {})\n\n/*\n * A reducer needs to be pure and side effect free\n * -> one solution is to implement a deep copy with the spread operator\n* */\n\nexport function district(\n    state: DistrictState = {byId: arrayToObjectById(districtData)},\n    action: DistrictAction\n): DistrictState {\n  switch (action.type) {\n    case DISTRICT_HIGHLIGHT:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            viewOptions: {\n              highlight: action.payload.highlight,\n              hover: state.byId[action.payload.id].viewOptions.hover\n            }\n          }\n        }\n\n      };\n\n    case DISTRICT_HIDE:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            viewOptions: {\n              highlight: action.payload.highlight,\n              hover: state.byId[action.payload.id].viewOptions.hover\n            }\n          }\n        }\n\n      };\n\n    case DISTRICT_OFF_HOVER:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            viewOptions: {\n              hover: action.payload.hover,\n              highlight: state.byId[action.payload.id].viewOptions.highlight\n            }\n          }\n        }\n\n      };\n    case DISTRICT_ON_HOVER:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            viewOptions: {\n              hover: action.payload.hover,\n              highlight: state.byId[action.payload.id].viewOptions.highlight\n            }\n          }\n        }\n\n      };\n  }\n  return state;\n}","export const OBSERVATION_UPDATE = 'observation/UPDATE';\nexport type OBSERVATION_UPDATE = typeof OBSERVATION_UPDATE;\n","import { ObservationAction } from './actions';\nimport { Observation, ObservationState } from './types';\nimport {  } from './constants';\n\nconst observationData = require('./../data/observation.json');\nconst arrayToObjectById = (array: Observation[]) =>\n  array.reduce((obj, item) => {\n    obj[item.id] = item\n    return obj\n  }, {})\n\n/*\n * A reducer needs to be pure and side effect free\n * -> one solution is to implement a deep copy with the spread operator\n* */\nexport function observation(\n  state: ObservationState = { byId: arrayToObjectById(observationData)},\n  action: ObservationAction\n): ObservationState {\n    switch (action.type) {\n\n    }\n    return state;\n}","import { UtilAction } from './actions';\nimport { Util } from './types';\nimport { TOGGLE_SELECT_INDICATOR_VISIBILITY, DISABLE_DISCLAIMER } from './constants';\n\nconst utilData = require('./../data/util.json');\n\n/*\n * A reducer needs to be pure and side effect free\n * -> one solution is to implement a deep copy with the spread operator\n* */\n\nexport function util(\n    state: Util = utilData,\n    action: UtilAction\n): Util {\n\n  switch (action.type) {\n    case TOGGLE_SELECT_INDICATOR_VISIBILITY : {\n      return {\n        ...state,\n        selectIndicatorConf: {\n          visible: action.payload.visible\n        }\n      }\n    }\n    case DISABLE_DISCLAIMER : {\n      return {\n        ...state,\n        showDisclaimer: action.payload.visible\n      }\n    }\n  }\n\n  return state;\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport { indicator } from './indicator/reducer';\nimport { district } from './district/reducer';\nimport { observation } from './observation/reducer';\nimport { IndicatorState } from './indicator/types';\nimport { DistrictState } from './district/types';\nimport { ObservationState } from './observation/types';\nimport { util } from './util/reducer';\nimport { Util } from './util/types';\n\ndeclare var window: Window & { devToolsExtension: any, __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any };\n\nexport type Rootstate = {\n  district: DistrictState,\n  indicator: IndicatorState,\n  observation: ObservationState,\n  util: Util,\n  // More reducer\n}\n\nconst rootReducer = combineReducers<Rootstate>({\n  district: district,\n  indicator: indicator,\n  observation: observation,\n  util: util\n});\n\n/* Plugin for chrome to see actions and how they effect changes in reducers */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(\n        // list middleware here\n\n    )),\n);\n","import createMuiTheme from '@material-ui/core/es/styles/createMuiTheme'\nimport { teal } from '@material-ui/core/es/colors'\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: teal,\n    secondary: teal,\n  },\n  overrides: {\n    MuiFormLabel: {\n      root: {\n        color: 'balck',\n      },\n    },\n    MuiFormControlLabel: {\n      label: {\n        fontSize: '12px !important',\n      },\n    },\n    MuiTooltip: {\n      tooltip: {\n        fontSize: '1rem',\n      },\n      tooltipPlacementTop: {\n        margin: '8px 0',\n        ['@media (min-width: 600px)']: {\n          margin: '7px 0',\n        },\n      },\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n})\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { HashRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\nimport App from './App'\nimport { store } from './state/index'\n// import registerServiceWorker from './registerServiceWorker'\nimport './index.css'\nimport { theme } from './theme/theme'\nimport 'babel-polyfill'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </Router>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n)\n"],"sourceRoot":""}